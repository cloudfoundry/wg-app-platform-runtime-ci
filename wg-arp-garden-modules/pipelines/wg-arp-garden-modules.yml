#@ load("@ytt:data", "data")
#@ load("ytt-helpers.star", "helpers")

#! Define-Groups
groups:
- name: test
  jobs: #@ helpers.packages_names_array(data.values.internal_repos,["", "ship-it-"])
- name: periodics
  jobs: #@ helpers.packages_names_array(data.values.internal_repos,["bump-dependencies-","sync-dot-github-dir-","sync-readme-"])

#! Define-Resources
resources:
- name: windows-worker-lock
  type: pool
  icon: cloud-lock
  source:
    branch: main
    pool: windows-worker-lock
    private_key: ((github-tas-runtime-bot/private-key))
    uri: git@github.com:cloudfoundry/runtime-ci-pools.git

#@ for package in data.values.internal_repos:
- name: #@ package.name
  type: git
  icon: source-branch
  source:
    branch: #@ helpers.on_branch(package)
    uri: #@ "git@github.com:{}".format(package.repo)
    private_key: ((github-tas-runtime-bot/private-key))

- name: #@ "{}-github-release".format(package.name)
  type: github-release
  icon: github
  source:
    access_token: ((github-tas-runtime-bot/access-token))
    repository: #@ package.name
    owner: cloudfoundry

- name: #@ "{}-version".format(package.name)
  type: semver
  icon: counter
  source:
    driver: gcs
    bucket: ci-release-versions
    key: #@ "garden-modules/{}/version".format(package.name)
    json_key: ((gcp-tas-runtime-service-account/config-json))
    initial_version: #@ package.initial_version
#@ end

- name: ci
  type: git
  icon: source-branch
  source:
    branch: main
    uri: https://github.com/cloudfoundry/wg-app-platform-runtime-ci

- name: shared-templates
  type: git
  icon: source-branch
  source:
    branch: main
    uri: https://github.com/cloudfoundry/wg-app-platform-runtime-ci
    paths: 
      - shared/github
      - wg-arp-garden-modules/github

- name: readme
  type: git
  icon: source-branch
  source:
    branch: main
    uri: https://github.com/cloudfoundry/wg-app-platform-runtime-ci
    paths: 
      - shared/*.md
      - wg-arp-garden-modules/*.md
      - wg-arp-garden-modules/readme/*.md

- name: image
  type: registry-image
  icon: docker
  source:                                        
    repository: us-central1-docker.pkg.dev/cf-diego-pivotal/tas-runtime-dockerhub-mirror/cloudfoundry/tas-runtime-build
    username: _json_key
    password: ((gcp-tas-runtime-service-account/config-json))
    tag: 'latest'

- name: golang-release-latest
  type: git
  icon: tag-outline
  source:
    tag_filter: v*
    uri: https://github.com/bosh-packages/golang-release.git

- name: hwc-release-branch 
  type: git
  icon: source-branch
  source:
    uri: git@github.com:cloudfoundry/hwc.git
    branch: release
    private_key: ((github-tas-runtime-bot/private-key))

- name: hwc-develop-branch-mergeback
  type: git
  icon: source-branch
  source:
    uri: git@github.com:cloudfoundry/hwc.git
    branch: develop
    private_key: ((github-tas-runtime-bot/private-key))

#! TIMERS
- name: weekly
  type: time
  icon: clock
  source:
    interval: '168h' #! 7 days
    start: 00:00
    stop: 00:59
    days:
      - Wednesday

#! Define-Jobs
jobs:

#@ for repo in data.values.internal_repos:
- name: #@ "sync-dot-github-dir-{}".format(repo.name)
  serial: true
  plan:
  - in_parallel:
      steps:
      - get: ci
      - get: image
      - get:  #@ repo.name
      - get: shared-templates
        trigger: true
  - do:
    - task: sync-dot-github-dir
      file: ci/shared/tasks/sync-dot-github-dir/linux.yml
      image: image
      input_mapping:
        repo: #@ repo.name
      params:
        PARENT_TEMPLATE_DIR: wg-arp-garden-modules
    - put: #@ repo.name
      params:
       rebase: true
       repository: synced-repo
#@ end

#@ for repo in data.values.internal_repos:
- name: #@ "sync-readme-{}".format(repo.name)
  serial: true
  plan:
  - in_parallel:
      steps:
      - get: ci
      - get: image
      - get:  #@ repo.name
      - get: weekly
        trigger: true
      - get: readme
        trigger: true
  - do:
    - task: sync-readme
      file: ci/shared/tasks/sync-readme/linux.yml
      image: image
      input_mapping:
        repo: #@ repo.name
    - put: #@ repo.name
      params:
       rebase: true
       repository: synced-repo
#@ end

#@ for package in helpers.packages_without_configure_db(data.values.internal_repos):
- name: #@ package.name
  serial: true
  plan:
  - in_parallel:
    - get: ci
    - resource: #@ package.name
      get: repo
      trigger: true
    - get: image
    - get: package-release
      resource: golang-release-latest
    - get: windows-worker-lock
  - task: determine-image-tag
    image: image
    params:
      PLUGIN: #@ package.name
    file: ci/shared/tasks/determine-image-tag/linux.yml
  - load_var: image_tag
    file: determined-image-tag/tag
  - in_parallel:
    - task: #@ "{}-linux".format(package.name)
      file: ci/shared/tasks/run-bin-test/linux.yml
      privileged: #@ helpers.privileged(package)
      vars:
        image_repository: cloudfoundry/tas-runtime-build
        image_password: ((gcp-tas-runtime-service-account/config-json))
        image_tag: ((.:image_tag))
      params:
        ENVS: |
          DOCKER_REGISTRY_USERNAME=((dockerhub-tasruntime-username))
          DOCKER_REGISTRY_PASSWORD=((dockerhub-tasruntime-password))
          PRIVATE_DOCKER_IMAGE_URL=docker://cloudfoundry/garden-private-image-test:groot
#@ if helpers.on_windows(package):
    - do:
      - put: windows-worker-lock
        params:
          acquire: true
      - task: start-windows-worker
        image: image
        file: ci/shared/tasks/bosh-start/linux.yml
        params:
          DEPLOYMENT: windows-worker
          INSTANCE_GROUP: windows-worker
          BOSH_CREDS: ((bosh-concourse-credentials/env_vars))
      - task: #@ "{}-windows".format(package.name)
        file: ci/shared/tasks/run-bin-test/windows.yml
        privileged: #@ helpers.privileged(package)
        params:
          ENVS: |
            DOCKER_REGISTRY_USERNAME=((dockerhub-tasruntime-username))
            DOCKER_REGISTRY_PASSWORD=((dockerhub-tasruntime-password))
            PRIVATE_DOCKER_IMAGE_URL=docker://cloudfoundry/garden-private-image-test:groot
      ensure:
        task: stop-windows-worker
        image: image
        file: ci/shared/tasks/bosh-stop/linux.yml
        params:
          DEPLOYMENT: windows-worker
          INSTANCE_GROUP: windows-worker
          BOSH_CREDS: ((bosh-concourse-credentials/env_vars))
        ensure:
          put: windows-worker-lock
          inputs: detect
          params:
            release: windows-worker-lock
#@ end
#@ end
#@ for package in helpers.packages_with_configure_db(data.values.internal_repos):
- name: #@ package.name
  serial: true
  plan:
  - in_parallel:
    - get: ci
    - resource: #@ package.name
      get: repo
      trigger: true
    - get: image
    - get: package-release
      resource: golang-release-latest
    - get: windows-worker-lock
  - do:
    - task: determine-image-tag
      image: image
      params:
        PLUGIN: #@ package.name
      file: ci/shared/tasks/determine-image-tag/linux.yml
#@ for db in data.values.db_flavors:
    - do:
      - task: #@ "determine-image-tag-{}".format(db.image)
        image: image
        file: ci/shared/tasks/determine-image-tag/linux.yml
        output_mapping:
          determined-image-tag: #@ "determined-image-tag-{}".format(db.image)
        params:
          IMAGE: #@ "cloudfoundry/tas-runtime-{}".format(db.image)
          PLUGIN: #@ package.name
      - load_var: #@ "image_tag_{}".format(db.image.replace("-", "_").replace(".", "_"))
        file: #@ "determined-image-tag-{}/tag".format(db.image)
#@ end
  - in_parallel:
#@ for db in data.values.db_flavors:
    - task: #@ "{}-{}-linux".format(package.name,db.image)
      file: ci/shared/tasks/run-bin-test/linux.yml
      privileged: #@ helpers.privileged(package)
      vars:
        image_repository: #@ "cloudfoundry/tas-runtime-{}".format(db.image)
        image_password: ((gcp-tas-runtime-service-account/config-json))
        image_tag: #@ "((.:image_tag_{}))".format(db.image.replace("-", "_").replace(".", "_"))
      params:
#@ if hasattr(package, "params") and hasattr(package.params, "FLAGS"):
        FLAGS: #@ "{}".format(package.params.FLAGS)
#@ end
        ENVS: |
          DOCKER_REGISTRY_USERNAME=((dockerhub-tasruntime-username))
          DOCKER_REGISTRY_PASSWORD=((dockerhub-tasruntime-password))
          PRIVATE_DOCKER_IMAGE_URL=docker://cloudfoundry/garden-private-image-test:groot
        DB: #@ db.value
#@ end
#@ if helpers.on_windows(package):
    - do:
      - put: windows-worker-lock
        params:
          acquire: true
      - task: start-windows-worker
        image: image
        file: ci/shared/tasks/bosh-start/linux.yml
        params:
          DEPLOYMENT: windows-worker
          INSTANCE_GROUP: windows-worker
          BOSH_CREDS: ((bosh-concourse-credentials/env_vars))
      - task: #@ "{}-mysql-windows".format(package.name)
        file: ci/shared/tasks/run-bin-test/windows.yml
        privileged: #@ helpers.privileged(package)
        params:
          ENVS: |
            DOCKER_REGISTRY_USERNAME=((dockerhub-tasruntime-username))
            DOCKER_REGISTRY_PASSWORD=((dockerhub-tasruntime-password))
            PRIVATE_DOCKER_IMAGE_URL=docker://cloudfoundry/garden-private-image-test:groot
          DB: mysql
      ensure:
        task: stop-windows-worker
        image: image
        file: ci/shared/tasks/bosh-stop/linux.yml
        params:
          DEPLOYMENT: windows-worker
          INSTANCE_GROUP: windows-worker
          BOSH_CREDS: ((bosh-concourse-credentials/env_vars))
        ensure:
          put: windows-worker-lock
          inputs: detect
          params:
            release: windows-worker-lock
#@ end
#@ end
- name: ship-it-hwc
  serial: true
  plan:
    - in_parallel:
        - get: ci
        - get: hwc
          passed: [hwc]
        - get: hwc-version
        - get: hwc-develop-branch-mergeback
        - get: image
        - get: weekly
          trigger: true
    - task: release-binaries
      file: ci/shared/tasks/run-bin-release-binaries/linux.yml
      image: image
      input_mapping:
        version: hwc-version
        repo: hwc
      params:
        OS: windows
        ARCH: |
          amd64
          386
    - put: hwc-release-branch
      params:
        repository: hwc
        tag: hwc-version/number
        tag_prefix: v
    - task: merge-release-onto-develop
      image: image
      file: ci/shared/tasks/git-merge-branches/linux.yml
      input_mapping:
        source-branch: hwc-release-branch
        onto-branch: hwc-develop-branch-mergeback
      params:
        SOURCE_BRANCH_NAME: release
        ONTO_BRANCH_NAME: develop
    - put: hwc-github-release
      params:
        name: hwc-version/number
        tag: hwc-version/number
        globs:
          - released-binaries/*
    - put: hwc-version
      params: {bump: major}
    - put: hwc-develop-branch-mergeback
      params:
        repository: merged-branch
        merge: true


#@ for package in data.values.internal_repos:
- name: #@ "bump-dependencies-{}".format(package.name)
  serial: true
  plan:
  - in_parallel:
      steps:
      - get: ci
      - resource: #@ package.name
        get: repo
      - get: image
      - get: weekly
        trigger: true
  - task: #@ "bump-dependencies-{}".format(package.name)
    image: image
    file: ci/shared/tasks/bump-dependencies-go-mod/linux.yml
    params:
      GO_MODS: go.mod
  - put: #@ package.name
    params:
      rebase: true
      repository: bumped-repo
#@ end

#@ for package in data.values.internal_repos:
#@ if package.name != "hwc":
- name: #@ "ship-it-{}".format(package.name)
  serial: true
  plan:
  - in_parallel:
      steps:
      - get: ci
      - get: #@ "{}-version".format(package.name)
      - resource: #@ package.name
        get: repo
        passed:
        - #@ package.name
        trigger: true
  - put: #@ package.name
    params:
      repository: repo
      tag: #@ "{}-version/number".format(package.name)
      tag_prefix: v
  - put: #@ "{}-github-release".format(package.name)
    params:
      name: #@ "{}-version/number".format(package.name)
      tag: #@ "{}-version/number".format(package.name)
      tag_prefix: v
  - get: next-version
    resource: #@ "{}-version".format(package.name)
    params: {bump: minor}
  - put: next-version
    resource: #@ "{}-version".format(package.name)
    params: {file: next-version/number}
#@ end
#@ end
