#@ load("@ytt:data", "data")
#@ load("ytt-helpers.star", "helpers")

#! Define-Groups
groups:
- name: test
  jobs: #@ helpers.packages_names_array(data.values.internal_repos) 
- name: periodics
  jobs: #@ helpers.packages_names_array(data.values.internal_repos,"bump-dependencies-")
- name: release
  jobs:
    - release-hwc

#! Define-Resources
resources:
#@ for package in data.values.internal_repos:
- name: #@ package.name
  type: git
  icon: github-box
  source:
    branch: #@ helpers.on_branch(package)
    uri: #@ "git@github.com:{}".format(package.repo)
    private_key: ((github-tas-runtime-bot/private-key))
#@ end

- name: ci
  type: git
  source:
    branch: main
    uri: https://github.com/cloudfoundry/wg-app-platform-runtime-ci

- name: image
  type: docker-image                             
  source:                                        
    repository: cloudfoundry/tas-runtime-build
    username: ((dockerhub-tasruntime/user))
    password: ((dockerhub-tasruntime/password))
    tag: 'latest'

- name: golang-release-latest
  type: git
  icon: github-box
  source:
    tag_filter: v*
    uri: https://github.com/bosh-packages/golang-release.git

- name: hwc-release-branch 
  type: git
  source:
    uri: git@github.com:cloudfoundry/hwc.git
    branch: release
    private_key: ((github-tas-runtime-bot/private-key))

- name: hwc-develop-branch-mergeback
  type: git
  source:
    uri: git@github.com:cloudfoundry/hwc.git
    branch: develop
    private_key: ((github-tas-runtime-bot/private-key))

- name: hwc-version
  type: semver
  source:
    bucket: hwc-release
    key: versions/hwc-version
    access_key_id: ((aws-s3-svc-gdn-win-bosh-s3/access-key-id))
    secret_access_key: ((aws-s3-svc-gdn-win-bosh-s3/secret-access-key))
    assume_role_arn: ((aws-s3-svc-gdn-win-bosh-s3/assume-role))
    initial_version: "1.0.0"

- name: hwc-github-release
  type: github-release
  check_every: '5m'
  source:
    user: cloudfoundry
    repository: hwc
    access_token: ((github-tas-runtime-bot/access-token))

#! TIMERS
- name: daily
  type: time
  icon: clock
  source:
    interval: '24h'  #! 1 day

#! Define-Jobs
jobs:

#@ for package in helpers.packages_without_configure_db(data.values.internal_repos):
- name: #@ package.name
  serial: true
  plan:
  - in_parallel:
    - get: ci
    - resource: #@ package.name
      get: repo
      trigger: true
    - get: image
    - get: package-release
      resource: golang-release-latest
  - task: determine-image-tag
    image: image
    params:
      PLUGIN: #@ package.name
    file: ci/shared/tasks/determine-image-tag/linux.yml
  - load_var: image_tag
    file: determined-image-tag/tag
  - in_parallel:
    - task: #@ "{}-linux".format(package.name)
      file: ci/shared/tasks/run-bin-test/linux.yml
      privileged: #@ helpers.privileged(package)
      vars:
        image_repository: cloudfoundry/tas-runtime-build
        image_tag: ((.:image_tag))
      params:
#@ if hasattr(package, "params") and hasattr(package.params, "FLAGS"):
        FLAGS: #@ "{}".format(package.params.FLAGS)
#@ end
        ENVS: |
          DOCKER_REGISTRY_USERNAME=((dockerhub-tasruntime/user))
          DOCKER_REGISTRY_PASSWORD=((dockerhub-tasruntime/password))
          PRIVATE_DOCKER_IMAGE_URL=docker://cloudfoundry/garden-private-image-test:groot
#@ if helpers.on_windows(package):
    - task: #@ "{}-windows".format(package.name)
      file: ci/shared/tasks/run-bin-test/windows.yml
      privileged: #@ helpers.privileged(package)
      params:
        ENVS: |
          DOCKER_REGISTRY_USERNAME=((dockerhub-tasruntime/user))
          DOCKER_REGISTRY_PASSWORD=((dockerhub-tasruntime/password))
          PRIVATE_DOCKER_IMAGE_URL=docker://cloudfoundry/garden-private-image-test:groot
#@ end
#@ end
#@ for package in helpers.packages_with_configure_db(data.values.internal_repos):
- name: #@ package.name
  serial: true
  plan:
  - in_parallel:
    - get: ci
    - resource: #@ package.name
      get: repo
      trigger: true
    - get: image
    - get: package-release
      resource: golang-release-latest
  - do:
    - task: determine-image-tag
      image: image
      params:
        PLUGIN: #@ package.name
      file: ci/shared/tasks/determine-image-tag/linux.yml
#@ for db in data.values.db_flavors:
    - do:
      - task: #@ "determine-image-tag-{}".format(db.image)
        image: image
        file: ci/shared/tasks/determine-image-tag/linux.yml
        output_mapping:
          determined-image-tag: #@ "determined-image-tag-{}".format(db.image)
        params:
          IMAGE: #@ "cloudfoundry/tas-runtime-{}".format(db.image)
          PLUGIN: #@ package.name
      - load_var: #@ "image_tag_{}".format(db.image.replace("-", "_").replace(".", "_"))
        file: #@ "determined-image-tag-{}/tag".format(db.image)
#@ end
  - in_parallel:
#@ for db in data.values.db_flavors:
    - task: #@ "{}-{}-linux".format(package.name,db.image)
      file: ci/shared/tasks/run-bin-test/linux.yml
      privileged: #@ helpers.privileged(package)
      vars:
        image_repository: #@ "cloudfoundry/tas-runtime-{}".format(db.image)
        image_tag: #@ "((.:image_tag_{}))".format(db.image.replace("-", "_").replace(".", "_"))
      params:
#@ if hasattr(package, "params") and hasattr(package.params, "FLAGS"):
        FLAGS: #@ "{}".format(package.params.FLAGS)
#@ end
        ENVS: |
          DOCKER_REGISTRY_USERNAME=((dockerhub-tasruntime/user))
          DOCKER_REGISTRY_PASSWORD=((dockerhub-tasruntime/password))
          PRIVATE_DOCKER_IMAGE_URL=docker://cloudfoundry/garden-private-image-test:groot
        DB: #@ db.value
#@ end
#@ if helpers.on_windows(package):
    - task: #@ "{}-mysql-windows".format(package.name)
      file: ci/shared/tasks/run-bin-test/windows.yml
      privileged: #@ helpers.privileged(package)
      params:
        ENVS: |
          DOCKER_REGISTRY_USERNAME=((dockerhub-tasruntime/user))
          DOCKER_REGISTRY_PASSWORD=((dockerhub-tasruntime/password))
          PRIVATE_DOCKER_IMAGE_URL=docker://cloudfoundry/garden-private-image-test:groot
        DB: mysql
#@ end
#@ end
- name: release-hwc
  serial: true
  plan:
    - in_parallel:
        - get: ci
        - get: hwc
          passed: [hwc]
        - get: hwc-version
        - get: hwc-develop-branch-mergeback
        - get: image
    - task: release-binaries
      file: ci/shared/tasks/run-bin-release-binaries/linux.yml
      image: image
      input_mapping:
        version: hwc-version
        repo: hwc
      params:
        OS: windows
        ARCH: |
          amd64
          386
    - put: hwc-release-branch
      params:
        repository: hwc
        tag: hwc-version/number
        tag_prefix: v
    - task: merge-release-onto-develop
      image: image
      file: ci/shared/tasks/git-merge-branches/linux.yml
      input_mapping:
        source-branch: hwc-release-branch
        onto-branch: hwc-develop-branch-mergeback
      params:
        SOURCE_BRANCH_NAME: release
        ONTO_BRANCH_NAME: develop
    - put: hwc-github-release
      params:
        name: hwc-version/number
        tag: hwc-version/number
        globs:
          - released-binaries/*
    - put: hwc-version
      params: {bump: major}

#@ for package in data.values.internal_repos:
- name: #@ "bump-dependencies-{}".format(package.name)
  serial: true
  plan:
  - in_parallel:
      steps:
      - get: ci
      - resource: #@ package.name
        get: repo
      - get: image
      - get: daily
        trigger: true
  - task: #@ "bump-dependencies-{}".format(package.name)
    image: image
    file: ci/shared/tasks/bump-dependencies-go-mod/linux.yml
    params:
      GO_MODS: go.mod
  - put: #@ package.name
    params:
      rebase: true
      repository: bumped-repo
#@ end
