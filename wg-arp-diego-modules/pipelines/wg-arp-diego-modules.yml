#@ load("@ytt:data", "data")
#@ load("ytt-helpers.star", "helpers")

#! Define-Groups
groups:
- name: test
  jobs: #@ helpers.packages_names_array(data.values.internal_repos) 

- name: periodics
  jobs: #@ helpers.packages_names_array(data.values.internal_repos,["bump-dependencies-","sync-dot-github-dir-","sync-readme-"])

#! Define-Resources
resources:
#@ for package in data.values.internal_repos:
- name: #@ package.name
  type: git
  icon: source-branch
  source:
    branch: main 
    uri: #@ "git@github.com:{}".format(package.repo)
    private_key: ((github-tas-runtime-bot/private-key))
  #@ end

- name: ci
  type: git
  icon: source-branch
  source:
    branch: main
    uri: https://github.com/cloudfoundry/wg-app-platform-runtime-ci

- name: shared-templates
  type: git
  icon: source-branch
  source:
    branch: main
    uri: https://github.com/cloudfoundry/wg-app-platform-runtime-ci
    paths: 
      - shared/github

- name: readme
  type: git
  icon: source-branch
  source:
    branch: main
    uri: https://github.com/cloudfoundry/wg-app-platform-runtime-ci
    paths: 
      - shared/*.md
      - wg-arp-diego-modules/*.md
      - wg-arp-diego-modules/readme/*.md

- name: image
  type: docker-image                             
  icon: docker
  source:                                        
    repository: us-central1-docker.pkg.dev/cf-diego-pivotal/tas-runtime-dockerhub-mirror/cloudfoundry/tas-runtime-build
    username: _json_key
    password: ((gcp-tas-runtime-service-account/config-json))
    tag: 'latest'

- name: golang-release-latest
  type: git
  icon: tag-outline
  source:
    tag_filter: v*
    uri: https://github.com/bosh-packages/golang-release.git

#! TIMERS
- name: daily
  type: time
  icon: clock
  source:
    interval: '24h'  #! 1 day

#! Define-Jobs
jobs:

#@ for repo in data.values.internal_repos:
- name: #@ "sync-dot-github-dir-{}".format(repo.name)
  serial: true
  plan:
  - in_parallel:
      steps:
      - get: ci
      - get: image
      - get:  #@ repo.name
      - get: shared-templates
        trigger: true
  - do:
    - task: sync-dot-github-dir
      file: ci/shared/tasks/sync-dot-github-dir/linux.yml
      image: image
      input_mapping:
        repo: #@ repo.name
    - put: #@ repo.name
      params:
       rebase: true
       repository: synced-repo
#@ end

#@ for repo in data.values.internal_repos:
- name: #@ "sync-readme-{}".format(repo.name)
  serial: true
  plan:
  - in_parallel:
      steps:
      - get: ci
      - get: image
      - get:  #@ repo.name
      - get: daily
        trigger: true
      - get: readme
        trigger: true
  - do:
    - task: sync-readme
      file: ci/shared/tasks/sync-readme/linux.yml
      image: image
      input_mapping:
        repo:  #@ repo.name
    - put: #@ repo.name
      params:
       rebase: true
       repository: synced-repo
#@ end

#@ for package in helpers.packages_without_configure_db(data.values.internal_repos):
- name: #@ package.name
  serial: true
  plan:
  - in_parallel:
    - get: ci
    - resource: #@ package.name
      get: repo
      trigger: true
    - get: image
    - get: package-release
      resource: golang-release-latest
  - task: determine-image-tag
    image: image
    params:
      PLUGIN: #@ package.name
    file: ci/shared/tasks/determine-image-tag/linux.yml
  - load_var: image_tag
    file: determined-image-tag/tag
  - in_parallel:
    - task: #@ "{}-linux".format(package.name)
      file: ci/shared/tasks/run-bin-test/linux.yml
      privileged: #@ helpers.privileged(package)
      vars:
        image_repository: cloudfoundry/tas-runtime-build
        image_tag: ((.:image_tag))
#@ if helpers.on_windows(package):
    - task: #@ "{}-windows".format(package.name)
      file: ci/shared/tasks/run-bin-test/windows.yml
      privileged: #@ helpers.privileged(package)
#@ end
#@ end

#@ for package in helpers.packages_with_configure_db(data.values.internal_repos):
- name: #@ package.name
  serial: true
  plan:
  - in_parallel:
    - get: ci
    - resource: #@ package.name
      get: repo
      trigger: true
    - get: image
    - get: package-release
      resource: golang-release-latest
  - do:
    - task: determine-image-tag
      image: image
      params:
        PLUGIN: #@ package.name
      file: ci/shared/tasks/determine-image-tag/linux.yml
#@ for db in data.values.db_flavors:
    - do:
      - task: #@ "determine-image-tag-{}".format(db.image)
        image: image
        file: ci/shared/tasks/determine-image-tag/linux.yml
        output_mapping:
          determined-image-tag: #@ "determined-image-tag-{}".format(db.image)
        params:
          IMAGE: #@ "cloudfoundry/tas-runtime-{}".format(db.image)
          PLUGIN: #@ package.name
      - load_var: #@ "image_tag_{}".format(db.image.replace("-", "_").replace(".", "_"))
        file: #@ "determined-image-tag-{}/tag".format(db.image)
#@ end
  - in_parallel:
#@ for db in data.values.db_flavors:
    - task: #@ "{}-{}-linux".format(package.name,db.image)
      file: ci/shared/tasks/run-bin-test/linux.yml
      privileged: #@ helpers.privileged(package)
      vars:
        image_repository: #@ "cloudfoundry/tas-runtime-{}".format(db.image)
        image_tag: #@ "((.:image_tag_{}))".format(db.image.replace("-", "_").replace(".", "_"))
      params:
        DB: #@ db.value
#@ end
#@ if helpers.on_windows(package):
    - task: #@ "{}-mysql-windows".format(package.name)
      file: ci/shared/tasks/run-bin-test/windows.yml
      privileged: #@ helpers.privileged(package)
      params:
        DB: mysql
#@ end
#@ end

#@ for package in data.values.internal_repos:
- name: #@ "bump-dependencies-{}".format(package.name)
  serial: true
  plan:
  - in_parallel:
      steps:
      - get: ci
      - resource: #@ package.name
        get: repo
      - get: image
      - get: daily 
        trigger: true
  - task: #@ "bump-dependencies-{}".format(package.name)
    image: image
    file: ci/shared/tasks/bump-dependencies-go-mod/linux.yml
    params:
      GO_MODS: go.mod
  - put: #@ package.name
    params:
      rebase: true
      repository: bumped-repo
#@ end
