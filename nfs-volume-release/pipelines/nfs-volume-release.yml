#@ load("@ytt:data", "data")
#@ load("ytt-helpers.star", "helpers")

#! Define-Groups
groups:
- name: release
  jobs:
  - template-tests
  - unit-and-integration-tests
  - lint-repo
  - claim-env
  - prepare-env
  - run-cats
  - volume-services-acceptance-tests
  - dockerdriver-integration
  - export-release
  - ship-what
  - ship-it
  - unclaim-env

- name: periodics
  jobs:
  - bump-dependencies-go-mod
  - bump-package-golang
  - bump-bosh-blobs
  - sync-dot-github-dir
  - sync-readme

- name: manual
  jobs:
  - release-env-lock

- name: version
  jobs:
  - major-bump
  - minor-bump
  - patch-bump


#! Define-ResourceGroups
resource_types:
- name: shepherd
  type: registry-image
  source:
    repository: us-west2-docker.pkg.dev/shepherd-268822/shepherd2/concourse-resource
    tag: v1  #! This may be bumped in the future

#! Define-Resources
resources:
- name: golang-release-latest
  type: git
  icon: git
  source:
    tag_filter: v*
    uri: https://github.com/bosh-packages/golang-release.git

- name: repo
  type: git
  icon: git
  source:
    branch: develop
    uri: git@github.com:cloudfoundry/nfs-volume-release
    private_key: ((github-tas-runtime-bot/private-key))
    ignore_paths:
    - .github/
    - .gitignore
    - .final_build
    - CODEOWNERS
    - LICENSE
    - NOTICE
    - README*
    - docs/
    - releases/

- name: release-branch 
  type: git
  icon: git
  source:
    uri: git@github.com:cloudfoundry/nfs-volume-release.git
    branch: release
    private_key: ((github-tas-runtime-bot/private-key))

- name: develop-branch-mergeback
  type: git
  icon: git
  source:
    uri: git@github.com:cloudfoundry/nfs-volume-release.git
    branch: develop
    private_key: ((github-tas-runtime-bot/private-key))

- name: ci
  type: git
  icon: git
  source:
    branch: main
    uri: https://github.com/cloudfoundry/wg-app-platform-runtime-ci

- name: cf-deployment
  type: git
  icon: git
  source:
    branch: main
    uri: https://github.com/cloudfoundry/cf-deployment.git

- name: cf-deployment-concourse-tasks
  type: git
  icon: git
  source:
    branch: main
    uri: https://github.com/cloudfoundry/cf-deployment-concourse-tasks.git

- name: cf-acceptance-tests
  type: git
  icon: git
  source:
    branch: release-candidate
    uri: https://github.com/cloudfoundry/cf-acceptance-tests

- name: go-version
  type: git
  icon: git
  source:
    branch: main
    uri: https://github.com/cloudfoundry/wg-app-platform-runtime-ci
    paths: [go-version.json]

- name: shared-templates
  type: git
  icon: source-branch
  source:
    branch: main
    uri: https://github.com/cloudfoundry/wg-app-platform-runtime-ci
    paths:
      - shared/github
      - nfs-volume-release/github

- name: readme
  type: git
  icon: source-branch
  source:
    branch: main
    uri: https://github.com/cloudfoundry/wg-app-platform-runtime-ci
    paths:
      - shared/*.md
      - nfs-volume-release/*.md
      - nfs-volume-release/readme/*.md


- name: cf-volume-services-acceptance-tests
  type: git
  icon: git
  source:
    uri: https://github.com/cloudfoundry/cf-volume-services-acceptance-tests.git
    branch: main

#! TIMERS
- name: weekly
  type: time
  icon: clock
  source:
    interval: '168h'

#! Shepherd pool
- name: env
  type: shepherd
  icon: sheep
  source:
    url: https://v2.shepherd.run
    service-account-key: ((shepherd-service-account-key))
    lease:
      namespace: tas-runtime
      pool:
        namespace: official
        name: cfd
    compatibility-mode: environments-app

- name: github-release
  type: github-release
  icon: github
  source:
    access_token: ((github-tas-runtime-bot/access-token))
    repository: nfs-volume-release
    owner: cloudfoundry

- name: draft-github-release 
  type: github-release
  icon: github
  source:
    access_token: ((github-tas-runtime-bot/access-token))
    drafts: true
    repository: nfs-volume-release
    owner: cloudfoundry

- name: version
  type: semver
  icon: counter
  source:
    driver: gcs
    bucket: ci-release-versions
    key: nfs-volume-release/version
    json_key: ((gcp-tas-runtime-service-account/config-json))

- name: env-lock
  type: pool
  icon: cloud-lock
  source:
    branch: main
    pool: nfs-volume-release-env-lock 
    private_key: ((github-tas-runtime-bot/private-key))
    uri: git@github.com:cloudfoundry/runtime-ci-pools.git

- name: image
  type: docker-image                             
  icon: docker
  source:                                        
    repository: cloudfoundry/tas-runtime-build
    tag: 'latest'
    username: ((dockerhub-tasruntime-username))
    password: ((dockerhub-tasruntime-password))

#! bosh blobs

- name: berkeleydb
  type: github-release
  icon: github
  source:
    access_token: ((github-tas-runtime-bot/access-token))
    repository: libdb
    owner: berkeleydb

- name: libevent
  type: github-release
  icon: github
  source:
    access_token: ((github-tas-runtime-bot/access-token))
    repository: libevent
    owner: libevent

- name: libtirpc
  type: git
  icon: tag-outline
  source:
    branch: master
    uri: git://git.linux-nfs.org/projects/steved/libtirpc.git
    tag_regex: ^libtirpc\-([0-9]|[1-9][0-9]*)\-([0-9]|[1-9][0-9]*)\-([0-9]|[1-9][0-9]*)$

- name: nfs-utils
  type: git
  icon: tag-outline
  source:
    branch: ubuntu/jammy
    uri: https://git.launchpad.net/ubuntu/+source/nfs-utils

- name: rpcbind
  type: git
  icon: tag-outline
  source:
    branch: ubuntu/jammy
    uri: https://git.launchpad.net/ubuntu/+source/rpcbind

- name: rpcsvc-proto
  type: github-release
  icon: github
  source:
    access_token: ((github-tas-runtime-bot/access-token))
    repository: rpcsvc-proto
    owner: thkukuk
    tag_filter: v*
    order_by: time

- name: sqlite
  type: git
  icon: tag-outline
  source:
    branch: master
    uri: https://github.com/sqlite/sqlite.git
    tag_filter: version-*

- name: util-linux
  type: git
  icon: tag-outline
  source:
    branch: stable/v2.40
    uri: https://github.com/util-linux/util-linux.git
    tag_regex: ^v([0-9]|[1-9][0-9]*)\.([0-9]|[1-9][0-9]*)\.([0-9]|[1-9][0-9]*)$

- name: openldap
  type: git
  icon: tag-outline
  source:
    branch: OPENLDAP_REL_ENG_2_6
    uri: https://git.openldap.org/openldap/openldap.git
    tag_filter: OPENLDAP_REL_ENG_2_6_*

- name: openssl
  type: github-release
  icon: github
  source:
    access_token: ((github-tas-runtime-bot/access-token))
    repository: openssl
    owner: openssl

#! Define-Jobs
jobs:
- name: bump-dependencies-go-mod
  serial: true
  plan:
  - in_parallel:
      steps:
      - get: ci
      - get: repo
      - get: image
      - get: weekly
        trigger: true
  - task: nfs-volume-release-bump-dependencies-go-mod
    image: image
    file: ci/shared/tasks/bump-dependencies-go-mod/linux.yml
    params:
      GO_MODS: |
        src/code.cloudfoundry.org/nfsbroker/go..mod
        src/code.cloudfoundry.org/nfsv3driver/go.mod
  - put: repo
    params:
      rebase: true
      repository: bumped-repo

- name: bump-package-golang
  plan:
  - in_parallel:
    - get: ci
    - get: repo
    - get: image
    - get: go-version
      trigger: true
    - get: golang-release-latest
      trigger: true

  - task: bump-golang-package-name
    image: image
    file: ci/shared/tasks/bump-golang-package-name/linux.yml
    output_mapping:
      bumped-repo: bumped-golang-package-name-linux
    params:
      PLATFORM: linux

  - task: bump-golang-linux
    file: ci/shared/tasks/bosh-vendor-package/linux.yml
    image: image
    input_mapping:
      repo: bumped-golang-package-name-linux
      package-release: golang-release-latest
    params:
      PACKAGE_NAME: golang-*-linux
      AWS_SECRET_ACCESS_KEY: ((aws-s3-107350105730-nfs-volume-services-s3/secret-access-key))
      AWS_ACCESS_KEY_ID: ((aws-s3-107350105730-nfs-volume-services-s3/access-key-id))
      AWS_ASSUME_ROLE_ARN: ((aws-s3-107350105730-nfs-volume-services-s3/assume-role))


  - put: repo
    params:
      rebase: true
      repository: vendored-repo

- name: bump-bosh-blobs
  serial: true
  plan:
  - in_parallel:
      steps:
      - get: ci
      - get: repo
      - get: image
      - get: berkeleydb
        trigger: true
      - get: libevent
        trigger: true
      - get: libtirpc
        params:
          fetch_tags: true
        trigger: true
      - get: nfs-utils
        params:
          fetch_tags: true
        trigger: true
      - get: rpcbind
        params:
          fetch_tags: true
        trigger: true
      - get: rpcsvc-proto
        trigger: true
      - get: sqlite
        params:
          fetch_tags: true
        trigger: true
      - get: util-linux
        params:
          fetch_tags: true
        trigger: true
      - get: openldap
        params:
          fetch_tags: true
        trigger: true
      - get: openssl
        trigger: true
  - do:
    - task: bump-bosh-blob-berkeleydb
      image: image
      file: ci/shared/tasks/bump-bosh-blobs/linux.yml
      input_mapping:
        blob: berkeleydb
      params:
        BOSH_BLOB_PATH: berkeleydb/db-*.tar.gz
        AWS_SECRET_ACCESS_KEY: ((aws-s3-107350105730-nfs-volume-services-s3/secret-access-key))
        AWS_ACCESS_KEY_ID: ((aws-s3-107350105730-nfs-volume-services-s3/access-key-id))
        AWS_ASSUME_ROLE_ARN: ((aws-s3-107350105730-nfs-volume-services-s3/assume-role))
    - put: repo
      params:
       rebase: true
       repository: bumped-repo
  - do:
    - task: bump-bosh-blob-libevent
      image: image
      file: ci/shared/tasks/bump-bosh-blobs/linux.yml
      input_mapping:
        blob: libevent
      params:
        BOSH_BLOB_PATH: nfs-debs/libevent-*-stable.tar.gz
        AWS_SECRET_ACCESS_KEY: ((aws-s3-107350105730-nfs-volume-services-s3/secret-access-key))
        AWS_ACCESS_KEY_ID: ((aws-s3-107350105730-nfs-volume-services-s3/access-key-id))
        AWS_ASSUME_ROLE_ARN: ((aws-s3-107350105730-nfs-volume-services-s3/assume-role))
    - put: repo
      params:
       rebase: true
       repository: bumped-repo
  - do:
    - task: bump-bosh-blob-libtirpc
      image: image
      file: ci/shared/tasks/bump-bosh-blobs/linux.yml
      input_mapping:
        blob: libtirpc
      params:
        BOSH_BLOB_PATH: nfs-debs/libtirpc-*.tar.gz
        AWS_SECRET_ACCESS_KEY: ((aws-s3-107350105730-nfs-volume-services-s3/secret-access-key))
        AWS_ACCESS_KEY_ID: ((aws-s3-107350105730-nfs-volume-services-s3/access-key-id))
        AWS_ASSUME_ROLE_ARN: ((aws-s3-107350105730-nfs-volume-services-s3/assume-role))
    - put: repo
      params:
       rebase: true
       repository: bumped-repo
  - do:
    - task: bump-bosh-blob-nfs-utils
      image: image
      file: ci/shared/tasks/bump-bosh-blobs/linux.yml
      input_mapping:
        blob: nfs-utils
      params:
        BOSH_BLOB_PATH: nfs-debs/nfs-utils-*.tar.gz
        AWS_SECRET_ACCESS_KEY: ((aws-s3-107350105730-nfs-volume-services-s3/secret-access-key))
        AWS_ACCESS_KEY_ID: ((aws-s3-107350105730-nfs-volume-services-s3/access-key-id))
        AWS_ASSUME_ROLE_ARN: ((aws-s3-107350105730-nfs-volume-services-s3/assume-role))
    - put: repo
      params:
       rebase: true
       repository: bumped-repo
  - do:
    - task: bump-bosh-blob-rpcbind
      image: image
      file: ci/shared/tasks/bump-bosh-blobs/linux.yml
      input_mapping:
        blob: rpcbind
      params:
        BOSH_BLOB_PATH: nfs-debs/rpcbind-*.tar.gz
        AWS_SECRET_ACCESS_KEY: ((aws-s3-107350105730-nfs-volume-services-s3/secret-access-key))
        AWS_ACCESS_KEY_ID: ((aws-s3-107350105730-nfs-volume-services-s3/access-key-id))
        AWS_ASSUME_ROLE_ARN: ((aws-s3-107350105730-nfs-volume-services-s3/assume-role))
    - put: repo
      params:
       rebase: true
       repository: bumped-repo
  - do:
    - task: bump-bosh-blob-rpcsvc-proto
      image: image
      file: ci/shared/tasks/bump-bosh-blobs/linux.yml
      input_mapping:
        blob: rpcsvc-proto
      params:
        BOSH_BLOB_PATH: nfs-debs/rpcsvc-proto-*.tar.xz
        AWS_SECRET_ACCESS_KEY: ((aws-s3-107350105730-nfs-volume-services-s3/secret-access-key))
        AWS_ACCESS_KEY_ID: ((aws-s3-107350105730-nfs-volume-services-s3/access-key-id))
        AWS_ASSUME_ROLE_ARN: ((aws-s3-107350105730-nfs-volume-services-s3/assume-role))
    - put: repo
      params:
       rebase: true
       repository: bumped-repo
  - do:
    - task: bump-bosh-blob-sqlite
      image: image
      file: ci/shared/tasks/bump-bosh-blobs/linux.yml
      input_mapping:
        blob: sqlite
      params:
        BOSH_BLOB_PATH: nfs-debs/sqlite-*.tar.gz
        AWS_SECRET_ACCESS_KEY: ((aws-s3-107350105730-nfs-volume-services-s3/secret-access-key))
        AWS_ACCESS_KEY_ID: ((aws-s3-107350105730-nfs-volume-services-s3/access-key-id))
        AWS_ASSUME_ROLE_ARN: ((aws-s3-107350105730-nfs-volume-services-s3/assume-role))
    - put: repo
      params:
       rebase: true
       repository: bumped-repo
  - do:
    - task: bump-bosh-blob-util-linux
      image: image
      file: ci/shared/tasks/bump-bosh-blobs/linux.yml
      input_mapping:
        blob: util-linux
      params:
        BOSH_BLOB_PATH: nfs-debs/util-linux-*.tar.gz
        AWS_SECRET_ACCESS_KEY: ((aws-s3-107350105730-nfs-volume-services-s3/secret-access-key))
        AWS_ACCESS_KEY_ID: ((aws-s3-107350105730-nfs-volume-services-s3/access-key-id))
        AWS_ASSUME_ROLE_ARN: ((aws-s3-107350105730-nfs-volume-services-s3/assume-role))
    - put: repo
      params:
       rebase: true
       repository: bumped-repo
  - do:
    - task: bump-bosh-blob-openldap
      image: image
      file: ci/shared/tasks/bump-bosh-blobs/linux.yml
      input_mapping:
        blob: openldap
      params:
        BOSH_BLOB_PATH: openldap/openldap-*.tgz
        AWS_SECRET_ACCESS_KEY: ((aws-s3-107350105730-nfs-volume-services-s3/secret-access-key))
        AWS_ACCESS_KEY_ID: ((aws-s3-107350105730-nfs-volume-services-s3/access-key-id))
        AWS_ASSUME_ROLE_ARN: ((aws-s3-107350105730-nfs-volume-services-s3/assume-role))
    - put: repo
      params:
       rebase: true
       repository: bumped-repo
  - do:
    - task: bump-bosh-blob-openssl
      image: image
      file: ci/shared/tasks/bump-bosh-blobs/linux.yml
      input_mapping:
        blob: openssl
      params:
        BOSH_BLOB_PATH: test-dependencies/openssl-*.tar.gz
        AWS_SECRET_ACCESS_KEY: ((aws-s3-107350105730-nfs-volume-services-s3/secret-access-key))
        AWS_ACCESS_KEY_ID: ((aws-s3-107350105730-nfs-volume-services-s3/access-key-id))
        AWS_ASSUME_ROLE_ARN: ((aws-s3-107350105730-nfs-volume-services-s3/assume-role))
    - put: repo
      params:
       rebase: true
       repository: bumped-repo
- name: sync-dot-github-dir
  serial: true
  plan:
  - in_parallel:
      steps:
      - get: ci
      - get: image
      - get: repo
      - get: shared-templates
        trigger: true
  - do:
    - task: sync-dot-github-dir-nfs-volume-release
      file: ci/shared/tasks/sync-dot-github-dir/linux.yml
      image: image
      params:
        PARENT_TEMPLATE_DIR: nfs-volume-release
    - put: repo
      params:
       rebase: true
       repository: synced-repo

- name: sync-readme
  serial: true
  plan:
  - in_parallel:
      steps:
      - get: ci
      - get: image
      - get: weekly
        trigger: true
      - get: repo
      - get: readme
        trigger: true
  - do:
    - task: sync-readme
      file: ci/shared/tasks/sync-readme/linux.yml
      image: image
    - put: repo
      params:
       rebase: true
       repository: synced-repo


- name: template-tests
  serial: true
  plan:
  - in_parallel:
    - get: ci
    - get: repo
      trigger: true
    - get: image
  - task: template-tests
    image: image
    file: ci/shared/tasks/run-tests-templates/linux.yml
    timeout: 30m

- name: unit-and-integration-tests
  serial: true
  plan:
  - in_parallel:
    - get: ci
    - get: repo
      trigger: true
    - get: image
    - get: package-release
      resource: golang-release-latest
  - task: determine-image-tag
    image: image
    file: ci/shared/tasks/determine-image-tag/linux.yml
  - load_var: image_tag
    file: determined-image-tag/tag
  - in_parallel:
#@ for repo in data.values.internal_repos:
    - task: #@ "{}".format(repo.name)
      file: ci/shared/tasks/run-bin-test/linux.yml
      vars:
        image_repository: cloudfoundry/tas-runtime-build
        image_tag: ((.:image_tag))
      params:
        DIR: #@ "src/code.cloudfoundry.org/{}".format(repo.name)
#@ end

- name: lint-repo
  serial: true
  plan:
  - in_parallel:
    - get: ci
    - get: repo
      trigger: true
    - get: image
  - task: lint-repo
    file: ci/shared/tasks/lint-repo/linux.yml
    image: image

- name: claim-env
  serial: true
  plan:
  - in_parallel:
    - get: ci
    - get: repo
      trigger: true
      passed:
        - template-tests
        - unit-and-integration-tests
        - lint-repo
    - get: image

    - put: env-lock
      params:
       acquire: true
  - put: env
    timeout: 6h
    params:
      action: create
      duration: 48h
      resource: env
      description: 'nfs-volume-release pipeline'

- name: prepare-env
  serial: true
  serial_groups: [acceptance]
  plan:
  - in_parallel:
    - get: ci
    - get: repo
      #! trigger: true
      #! passed: [claim-env]
    - get: image
    - get: cf-deployment
    - get: cf-deployment-concourse-tasks
    - get: env
      passed: [claim-env]
      trigger: true
  - task: prepare-cf-deployment-env
    image: image
    params:
      VARS:
        nfs-ldap-host: "nfstestldapserver.service.cf.internal"
        nfs-ldap-service-user: "cn=admin,dc=domain,dc=com"
        nfs-ldap-service-password: "secret"
        nfs-ldap-port: 636
        nfs-ldap-proto: tcp
        nfs-ldap-fqdn: "ou=Users,dc=domain,dc=com"
    file: ci/shared/tasks/run-bin-prepare-cf-deployment-env/linux.yml
  - task: combine-ops-files
    file: ci/shared/tasks/combine-assets/linux.yml
    image: image
    input_mapping:
      input-01: cf-deployment
    params:
      COPY_ACTIONS: |
        {input-01/operations/enable-nfs-volume-service.yml,combined-assets}
        {input-01/operations/use-compiled-releases.yml,combined-assets}
        {input-01/operations/add-persistent-isolation-segment-diego-cell.yml,combined-assets}
        {input-01/operations/add-persistent-isolation-segment-router.yml,combined-assets}
        {input-01/operations/test/enable-nfs-test-server.yml,combined-assets}
        {input-01/operations/test/enable-nfs-test-ldapserver.yml,combined-assets}
        {input-01/operations/backup-and-restore/enable-backup-restore.yml,combined-assets}
        {ci/shared/opsfiles/add-lb-ca-cert.yml,combined-assets}
        {ci/shared/opsfiles/scale-for-cats.yml,combined-assets}
        {ci/nfs-volume-release/opsfiles/add-dockerdriver-integration-errand.yml,combined-assets}
        {ci/nfs-volume-release/opsfiles/enable-nfs-ldap-for-isolated-diego-cell.yml,combined-assets}
  - task: deploy-cf-deployment
    file: cf-deployment-concourse-tasks/bosh-deploy-with-created-release/task.yml
    input_mapping:
      ops-files: combined-assets
      release: repo
      vars-files: prepared-env
      toolsmiths-env: env
    params:
      DEPLOY_WITH_UPTIME_MEASUREMENTS: "false"
      FAIL_ON_DOWNTIME: "false"
      VARS_FILES: vars.yml
      OPS_FILES: #@ "\n".join(data.values.opsfiles)
  - in_parallel:
    - task: open-asg-for-credhub
      file: cf-deployment-concourse-tasks/open-asgs-for-bosh-instance-group/task.yml
      input_mapping:
        toolsmiths-env: env
      params:
        INSTANCE_GROUP_NAME: credhub
        SECURITY_GROUP_NAME: credhub
    - task: open-asg-for-uaa
      file: cf-deployment-concourse-tasks/open-asgs-for-bosh-instance-group/task.yml
      input_mapping:
        toolsmiths-env: env
      params:
        INSTANCE_GROUP_NAME: uaa
        SECURITY_GROUP_NAME: uaa
    - task: open-asg-for-nfstestserver
      file: cf-deployment-concourse-tasks/open-asgs-for-bosh-instance-group/task.yml
      input_mapping:
        toolsmiths-env: env
      params:
        INSTANCE_GROUP_NAME: nfstestserver
        SECURITY_GROUP_NAME: nfstestserver
    - task: enable-feature-flags-for-cats
      file: cf-deployment-concourse-tasks/set-feature-flags/task.yml
      input_mapping:
        toolsmiths-env: env
      params:
        ENABLED_FEATURE_FLAGS: diego_docker service_instance_sharing
    - task: create-isolation-segment
      image: image
      file: ci/shared/tasks/run-cf-command/linux.yml
      params:
        CMD: create-isolation-segment persistent_isolation_segment
  - task: run-nfsbrokerpush-errand
    file: cf-deployment-concourse-tasks/run-errand/task.yml
    input_mapping:
      toolsmiths-env: env
    params:
      ERRAND_NAME: nfsbrokerpush
      INSTANCE: nfs-broker-push
  - task: run-nfsldapbrokerpush-errand
    file: cf-deployment-concourse-tasks/run-errand/task.yml
    input_mapping:
      toolsmiths-env: env
    params:
      ERRAND_NAME: nfs-ldap-broker-push

- name: run-cats
  serial: true
  serial_groups: [acceptance]
  plan:
  - in_parallel:
    - get: ci
    - get: repo
      passed: [prepare-env]
      trigger: true
    - get: image
    - get: env
      passed: [prepare-env]
      trigger: true
    - get: cf-deployment-concourse-tasks
    - get: cf-acceptance-tests
    - get: cf-deployment
  - task: create-cats-config
    image: image
    file: ci/shared/tasks/build-acceptance-test-configs/linux.yml
    params:
      ENVS: |
        VOLUME_SERVICE_SERVICE_NAME=nfs
        VOLUME_SERVICE_PLAN_NAME=Existing
      CONFIGS: cats
      WITH_VOLUME_SERVICES: true
      WITH_ISOSEG: false
      WITH_DYNAMIC_ASG: false
  - task: cats
    file: cf-deployment-concourse-tasks/run-cats/task.yml
    attempts: 2
    input_mapping:
      integration-config: built-acceptance-test-configs
    params:
      CONFIG_FILE_PATH: cats.json

- name: volume-services-acceptance-tests
  serial: true
  serial_groups: [acceptance]
  plan:
  - in_parallel:
      fail_fast: true
      steps:
      - get: cf-volume-services-acceptance-tests
      - get: ci
      - get: image
      - get: env
        passed: [ prepare-env ]
        trigger: true
      - get: repo
        passed: [ prepare-env ]
        trigger: true
      - get: package-release
        resource: golang-release-latest
  - task: determine-image-tag
    image: image
    file: ci/shared/tasks/determine-image-tag/linux.yml
  - load_var: image_tag
    file: determined-image-tag/tag
  - in_parallel:
    - do: 
      - task: generate-cf-volume-services-acceptance-tests-config-without-ldap
        image: image
        file: ci/shared/tasks/build-acceptance-test-configs/linux.yml
        output_mapping:
          built-acceptance-test-configs: configs-without-ldap
        params:
          CONFIGS: volume-services-acceptance-tests
          ENVS: |
            VOLUME_SERVICE_SERVICE_NAME=nfs
            VOLUME_SERVICE_BROKER_NAME=nfsbroker
            VOLUME_SERVICE_PLAN_NAME=Existing
      - task: run-bin-test-cf-volume-services-acceptance-tests-without-ldap
        file: ci/shared/tasks/run-bin-test/linux.yml
        input_mapping:
          repo: cf-volume-services-acceptance-tests
          input-01: configs-without-ldap
        attempts: 2
        vars:
          image_repository: cloudfoundry/tas-runtime-build
          image_tag: ((.:image_tag))
        params:
          ENVS: |
            CONFIG=$PWD/input-01/volume-services-acceptance-tests.json
    - do: 
      - task: generate-cf-volume-services-acceptance-tests-config-with-ldap
        image: image
        file: ci/shared/tasks/build-acceptance-test-configs/linux.yml
        output_mapping:
          built-acceptance-test-configs: configs-with-ldap
        params:
          CONFIGS: volume-services-acceptance-tests
          WITH_ISOSEG: true
          ENVS: |
            VOLUME_SERVICE_SERVICE_NAME=nfs
            VOLUME_SERVICE_BROKER_NAME=nfsldapbroker
            VOLUME_SERVICE_PLAN_NAME=Existing
      - task: run-bin-test-cf-volume-services-acceptance-tests-with-ldap
        file: ci/shared/tasks/run-bin-test/linux.yml
        input_mapping:
          repo: cf-volume-services-acceptance-tests
          input-01: configs-with-ldap
        attempts: 2
        vars:
          image_repository: cloudfoundry/tas-runtime-build
          image_tag: ((.:image_tag))
        params:
          ENVS: |
            CONFIG=$PWD/input-01/volume-services-acceptance-tests.json

- name: dockerdriver-integration
  serial: true
  serial_groups: [acceptance]
  plan:
  - in_parallel:
      fail_fast: true
      steps:
      - get: ci
      - get: image
      - get: env
        passed: [ prepare-env ]
        trigger: true
      - get: repo
        passed: [ prepare-env ]
        trigger: true
      - get: cf-deployment-concourse-tasks
  - task: run-dockerdriver-integration-errand
    file: cf-deployment-concourse-tasks/run-errand/task.yml
    input_mapping:
      toolsmiths-env: env
    params:
      DEPLOYMENT_NAME: cf
      ERRAND_NAME: dockerdriver-integration

- name: export-release
  serial: true
  serial_groups: [acceptance]
  plan:
  - in_parallel:
    - get: ci
    - get: repo
      passed: [prepare-env]
      trigger: true
    - get: image
    - get: env
      passed: [prepare-env]
      trigger: true
    - get: cf-deployment-concourse-tasks
  - task: export-release
    file: ci/shared/tasks/bosh-export-release/linux.yml
    image: image

- name: ship-what
  plan:
    - in_parallel:
        steps:
        - get: ci
        - get: repo
          passed:
            - run-cats
            - volume-services-acceptance-tests
            - dockerdriver-integration
            - export-release
          trigger: true
        - get: image
        - get: release-branch
          params:
            submodules: none
        - get: github-release
        - get: version
        - get: env
          passed:
            - run-cats
            - volume-services-acceptance-tests
            - dockerdriver-integration
            - export-release
          trigger: true

    - task: check-safe-to-release-repo
      image: image
      file: ci/shared/tasks/check-safe-to-release-repo/linux.yml
      input_mapping:
        release-repo: release-branch

    - task: build-release-notes-nfs-volume-release
      image: image
      file: ci/shared/tasks/build-release-notes/linux.yml
      input_mapping:
        previous-github-release: github-release

- name: ship-it
  serial: true
  plan:
    - in_parallel:
        steps:
        - get: ci
        - get: repo
          passed: [ ship-what ]
        - get: image
        - get: release-branch
          params:
            submodules: none
        - get: github-release
        - get: version
        - get: develop-branch-mergeback
          params:
            submodules: none

    - task: check-safe-to-release-branch
      image: image
      file: ci/shared/tasks/check-safe-to-release-repo/linux.yml
      input_mapping:
        release-repo: release-branch

    - task: build-release-notes-nfs-volume-release
      image: image
      file: ci/shared/tasks/build-release-notes/linux.yml
      input_mapping:
        previous-github-release: github-release

    - task: bosh-finalize-release
      image: image
      file: ci/shared/tasks/bosh-finalize-release/linux.yml
      params:
        AWS_SECRET_ACCESS_KEY: ((aws-s3-107350105730-nfs-volume-services-s3/secret-access-key))
        AWS_ACCESS_KEY_ID: ((aws-s3-107350105730-nfs-volume-services-s3/access-key-id))
        AWS_ASSUME_ROLE_ARN: ((aws-s3-107350105730-nfs-volume-services-s3/assume-role))

    - put: release-branch
      params:
        repository: finalized-release-repo
        tag: version/number
        tag_prefix: v

    - task: merge-release-onto-develop
      image: image
      file: ci/shared/tasks/git-merge-branches/linux.yml
      input_mapping:
        source-branch: release-branch
        onto-branch: develop-branch-mergeback
      params:
        SOURCE_BRANCH_NAME: release
        ONTO_BRANCH_NAME: develop

    - in_parallel:
        steps:
        - put: draft-github-release
          params:
            name: version/number
            tag: version/number
            tag_prefix: v
            body: built-release-notes/notes.md
            globs:
            - finalized-release-tarball/nfs-volume*.tgz
        - put: develop-branch-mergeback
          params:
            repository: merged-branch
            merge: true

    - get: next-version
      resource: version
      params: {bump: minor}
    - put: next-version
      resource: version
      params: {file: next-version/number}

- name: unclaim-env
  serial: true
  plan:
  - get: env
    passed: [ship-what]
    trigger: true
  - get: env-lock
  - put: env
    params:
      action: release
      resource: env
  - params:
      release: env-lock #! path to the resource in the above get
    put: env-lock

- name: release-env-lock
  plan:
  - get: env-lock
  - try:
      do:
      - get: env
        passed: [claim-env]
      - put: env
        params:
          action: release
          resource: env
  ensure:
    put: env-lock
    params:
      release: env-lock #! path to the resource in the above get

#! versioning
- name: patch-bump
  serial_groups: [version]
  plan:
  - get: version
    params: {bump: patch}
  - put: version
    params: {file: version/number}

- name: minor-bump
  serial_groups: [version]
  plan:
  - get: version
    params: {bump: minor}
  - put: version
    params: {file: version/number}

- name: major-bump
  serial_groups: [version]
  plan:
  - get: version
    params: {bump: major}
  - put: version
    params: {file: version/number}
