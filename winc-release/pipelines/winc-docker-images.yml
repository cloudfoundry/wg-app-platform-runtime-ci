---
resource_types:
- name: command-runner
  type: docker-image
  source:
    repository: us-central1-docker.pkg.dev/app-runtime-platform-wg/dockerhub-mirror/cloudfoundrydevelopers/command-runner-resource
    username: _json_key
    password: ((gcp-arp-artifact-registry-service-account-token))
    tag: latest

resources:
- name: groot-windows-test-link-dockerfile
  type: git
  icon: source-branch
  source:
    uri: https://github.com/cloudfoundry/wg-app-platform-runtime-ci.git
    branch: main
    private_key: ((github-appruntimeplatform-bot/private-key))
    paths:
    - winc-release/dockerfiles/link/Dockerfile

- name: groot-windows-test-regularfile-dockerfile
  type: git
  icon: source-branch
  source:
    uri: https://github.com/cloudfoundry/wg-app-platform-runtime-ci.git
    branch: main
    private_key: ((github-appruntimeplatform-bot/private-key))
    paths:
    - winc-release/dockerfiles/regularfile/Dockerfile

- name: groot-windows-test-servercore-dockerfile
  type: git
  icon: source-branch
  source:
    uri: https://github.com/cloudfoundry/wg-app-platform-runtime-ci.git
    branch: main
    private_key: ((github-appruntimeplatform-bot/private-key))
    paths:
    - winc-release/dockerfiles/servercore/Dockerfile

- name: groot-windows-test-whiteout-dockerfile
  type: git
  icon: source-branch
  source:
    uri: https://github.com/cloudfoundry/wg-app-platform-runtime-ci.git
    branch: main
    private_key: ((github-appruntimeplatform-bot/private-key))
    paths:
    - winc-release/dockerfiles/whiteout/Dockerfile

- name: ci
  type: git
  icon: source-branch
  source:
    branch: main
    uri: https://github.com/cloudfoundry/wg-app-platform-runtime-ci

- name: image
  type: registry-image
  icon: docker
  source:
    repository: us-central1-docker.pkg.dev/app-runtime-platform-wg/dockerhub-mirror/cloudfoundry/tas-runtime-build
    username: _json_key
    password: ((gcp-arp-artifact-registry-service-account-token))

- name: http-golang-download
  type: command-runner
  icon: link-variant
  source:
    version_key: "latest-golang"
    check_command: "echo https://dl.google.com/go/$(curl -s https://go.dev/dl/?mode=json | grep -o 'go.*.linux-amd64.tar.gz' | head -n 1 | tr -d '\r\n')"
    in_command:    "curl --silent --fail --output $1/golang.tgz https://dl.google.com/go/$(curl -s https://go.dev/dl/?mode=json | grep -o 'go.*.linux-amd64.tar.gz' | head -n 1 | tr -d '\r\n')"

- name: windows-worker-lock
  type: pool
  icon: cloud-lock
  source:
    branch: main
    pool: windows-worker-lock
    private_key: ((github-appruntimeplatform-bot/private-key))
    uri: git@github.com:cloudfoundry/runtime-ci-pools.git

jobs:
- name: groot-windows-test-link
  serial: true
  plan:
  - in_parallel:
    - get: http-golang-download
      trigger: true
    - get: groot-windows-test-link-dockerfile
      trigger: true
    - get: ci
    - get: image
  - put: windows-worker-lock
    params:
      acquire: true
  - task: start-windows-worker
    image: image
    file: ci/shared/tasks/bosh-start/linux.yml
    params:
      DEPLOYMENT: windows-worker
      INSTANCE_GROUP: windows-worker
      BOSH_CREDS: ((bosh-concourse-credentials/env_vars))
  - task: build-push-groot-windows-dockerfile
    file: ci/winc-release/tasks/build-push-groot-windows-dockerfile/windows.yml
    params:
      ENVS: |
        IMAGE_NAME=cloudfoundry/groot-windows-test
        IMAGE_TAG=link
        DOCKERFILE=$PWD/ci/winc-release/dockerfiles/link/Dockerfile
        DOCKER_USERNAME=((dockerhub-appruntimeplatform-username))
        DOCKER_PASSWORD=((dockerhub-appruntimeplatform-password))
  ensure:
    task: stop-windows-worker
    image: image
    file: ci/shared/tasks/bosh-stop/linux.yml
    params:
      DEPLOYMENT: windows-worker
      INSTANCE_GROUP: windows-worker
      BOSH_CREDS: ((bosh-concourse-credentials/env_vars))
    ensure:
      put: windows-worker-lock
      inputs: detect
      params:
        release: windows-worker-lock

- name: groot-windows-test-regularfile
  serial: true
  plan:
  - in_parallel:
    - get: http-golang-download
      trigger: true
    - get: groot-windows-test-regularfile-dockerfile
      trigger: true
    - get: ci
    - get: image
  - put: windows-worker-lock
    params:
      acquire: true
  - task: start-windows-worker
    image: image
    file: ci/shared/tasks/bosh-start/linux.yml
    params:
      DEPLOYMENT: windows-worker
      INSTANCE_GROUP: windows-worker
      BOSH_CREDS: ((bosh-concourse-credentials/env_vars))
  - task: build-push-groot-windows-dockerfile
    file: ci/winc-release/tasks/build-push-groot-windows-dockerfile/windows.yml
    params:
      ENVS: |
        IMAGE_NAME=cloudfoundry/groot-windows-test
        IMAGE_TAG=regularfile
        DOCKERFILE=$PWD/ci/winc-release/dockerfiles/regularfile/Dockerfile
        DOCKER_USERNAME=((dockerhub-appruntimeplatform-username))
        DOCKER_PASSWORD=((dockerhub-appruntimeplatform-password))
  ensure:
    task: stop-windows-worker
    image: image
    file: ci/shared/tasks/bosh-stop/linux.yml
    params:
      DEPLOYMENT: windows-worker
      INSTANCE_GROUP: windows-worker
      BOSH_CREDS: ((bosh-concourse-credentials/env_vars))
    ensure:
      put: windows-worker-lock
      inputs: detect
      params:
        release: windows-worker-lock

- name: groot-windows-test-servercore
  serial: true
  plan:
  - in_parallel:
    - get: http-golang-download
      trigger: true
    - get: groot-windows-test-servercore-dockerfile
      trigger: true
    - get: ci
    - get: image
  - put: windows-worker-lock
    params:
      acquire: true
  - task: start-windows-worker
    image: image
    file: ci/shared/tasks/bosh-start/linux.yml
    params:
      DEPLOYMENT: windows-worker
      INSTANCE_GROUP: windows-worker
      BOSH_CREDS: ((bosh-concourse-credentials/env_vars))
  - task: build-push-groot-windows-dockerfile
    file: ci/winc-release/tasks/build-push-groot-windows-dockerfile/windows.yml
    params:
      ENVS: |
        IMAGE_NAME=cloudfoundry/groot-windows-test
        IMAGE_TAG=servercore
        DOCKERFILE=$PWD/ci/winc-release/dockerfiles/servercore/Dockerfile
        DOCKER_USERNAME=((dockerhub-appruntimeplatform-username))
        DOCKER_PASSWORD=((dockerhub-appruntimeplatform-password))
  ensure:
    task: stop-windows-worker
    image: image
    file: ci/shared/tasks/bosh-stop/linux.yml
    params:
      DEPLOYMENT: windows-worker
      INSTANCE_GROUP: windows-worker
      BOSH_CREDS: ((bosh-concourse-credentials/env_vars))
    ensure:
      put: windows-worker-lock
      inputs: detect
      params:
        release: windows-worker-lock

- name: groot-windows-test-whiteout
  serial: true
  plan:
  - in_parallel:
    - get: http-golang-download
      trigger: true
    - get: groot-windows-test-whiteout-dockerfile
      trigger: true
    - get: ci
    - get: image
  - put: windows-worker-lock
    params:
      acquire: true
  - task: start-windows-worker
    image: image
    file: ci/shared/tasks/bosh-start/linux.yml
    params:
      DEPLOYMENT: windows-worker
      INSTANCE_GROUP: windows-worker
      BOSH_CREDS: ((bosh-concourse-credentials/env_vars))
  - task: build-push-groot-windows-dockerfile
    file: ci/winc-release/tasks/build-push-groot-windows-dockerfile/windows.yml
    params:
      ENVS: |
        IMAGE_NAME=cloudfoundry/groot-windows-test
        IMAGE_TAG=whiteout
        DOCKERFILE=$PWD/ci/winc-release/dockerfiles/whiteout/Dockerfile
        DOCKER_USERNAME=((dockerhub-appruntimeplatform-username))
        DOCKER_PASSWORD=((dockerhub-appruntimeplatform-password))
  ensure:
    task: stop-windows-worker
    image: image
    file: ci/shared/tasks/bosh-stop/linux.yml
    params:
      DEPLOYMENT: windows-worker
      INSTANCE_GROUP: windows-worker
      BOSH_CREDS: ((bosh-concourse-credentials/env_vars))
    ensure:
      put: windows-worker-lock
      inputs: detect
      params:
        release: windows-worker-lock

