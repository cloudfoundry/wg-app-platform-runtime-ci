#@ load("@ytt:data", "data")

#@ load("ytt-helpers.star", "helpers")

groups:
- name: release
  jobs:
  - unit-and-integration-tests
  - lint-repo
  - claim-env
  - example-app-deployment
  - export-release
  - ship-what
  - ship-it
  - unclaim-env

- name: periodics
  jobs:
  - bump-dependencies-go-mod
  - bump-package-golang

- name: manual
  jobs:
  - release-env-lock

- name: version
  jobs:
  - major-bump
  - minor-bump
  - patch-bump


#! Define-ResourceGroups
resource_types:
- name: shepherd
  type: registry-image
  source:
    repository: us-west2-docker.pkg.dev/shepherd-268822/shepherd2/concourse-resource
    tag: v1  #! This may be bumped in the future

#! Define-Resources
resources:
- name: golang-release-latest
  type: git
  icon: github-box
  source:
    tag_filter: v*
    uri: https://github.com/bosh-packages/golang-release.git

- name: repo
  type: git
  icon: github-box
  source:
    branch: develop
    uri: git@github.com:cloudfoundry/healthchecker-release
    private_key: ((github-tas-runtime-bot/private-key))

- name: release-branch 
  type: git
  source:
    uri: git@github.com:cloudfoundry/healthchecker-release.git
    branch: release
    private_key: ((github-tas-runtime-bot/private-key))

- name: develop-branch-mergeback
  type: git
  source:
    uri: git@github.com:cloudfoundry/healthchecker-release.git
    branch: develop
    private_key: ((github-tas-runtime-bot/private-key))

- name: ci
  type: git
  source:
    branch: main
    uri: https://github.com/cloudfoundry/wg-app-platform-runtime-ci

- name: go-version
  type: git
  source:
    branch: main
    uri: https://github.com/cloudfoundry/wg-app-platform-runtime-ci
    paths: [go-version.json]

#! TIMERS
- name: daily
  type: time
  icon: clock
  source:
    interval: '24h'  #! 1 day 

- name: env
  type: shepherd
  source:
    url: https://v2.shepherd.run
    service-account-key: ((shepherd-service-account-key))
    lease:
      namespace: tas-runtime
      pool:
        namespace: official
        name: cfd
    compatibility-mode: environments-app

- name: github-release
  source:
    access_token: ((github-tas-runtime-bot/access-token))
    repository: healthchecker-release
    owner: cloudfoundry
  type: github-release

- name: draft-github-release 
  source:
    access_token: ((github-tas-runtime-bot/access-token))
    drafts: true
    repository: healthchecker-release
    owner: cloudfoundry
  type: github-release

- name: version
  type: semver
  source:
    driver: gcs
    bucket: ci-release-versions
    key: healthchecker-release/version
    json_key: ((gcp-tas-runtime-service-account/config-json))

- name: env-lock
  source:
    branch: main
    pool: healthchecker-release-env-lock 
    private_key: ((github-tas-runtime-bot/private-key))
    uri: git@github.com:cloudfoundry/runtime-ci-pools.git
  type: pool

- name: image
  type: docker-image                             
  source:                                        
    repository: cloudfoundry/tas-runtime-build
    username: ((dockerhub-tasruntime/user))
    password: ((dockerhub-tasruntime/password))
    tag: 'latest'

#! Define-Jobs
jobs:
- name: bump-dependencies-go-mod
  serial: true
  plan:
  - in_parallel:
      steps:
      - get: ci
      - get: repo
      - get: image
      - get: daily
        trigger: true
  - task: healthchecker-release-bump-dependencies-go-mod
    image: image
    file: ci/shared/tasks/bump-dependencies-go-mod/linux.yml
    params:
      GO_MODS: src/code.cloudfoundry.org/go.mod
      EXTRA_GO_TAGS: tools
  - put: repo
    params:
      rebase: true
      repository: bumped-repo

- name: bump-package-golang
  plan:
  - in_parallel:
    - get: ci
    - get: go-version
      trigger: true
    - get: repo
    - get: image
    - get: golang-release-latest
      trigger: true

  - task: bump-golang-package-name
    image: image
    file: ci/shared/tasks/bump-golang-package-name/linux.yml
    params:
      PLATFORM: linux

  - task: bump-golang-linux
    file: ci/shared/tasks/bosh-vendor-package/linux.yml
    image: image
    input_mapping:
      repo: bumped-repo
      package-release: golang-release-latest
    params:
      PACKAGE_NAME: golang-*-linux
      GCP_BLOBSTORE_SERVICE_ACCOUNT_KEY: ((gcp-tas-runtime-service-account/config-json))

  - put: repo
    params:
      rebase: true
      repository: vendored-repo

- name: unit-and-integration-tests
  serial: true
  plan:
  - in_parallel:
    - get: ci
    - get: repo
      trigger: true
    - get: image
    - get: package-release
      resource: golang-release-latest
  - task: determine-image-tag
    image: image
    file: ci/shared/tasks/determine-image-tag/linux.yml
  - load_var: image_tag
    file: determined-image-tag/tag
  - in_parallel:
#@ for package in helpers.packages_without_configure_db(data.values.internal_repos):
    - task: #@ package.name
      file: ci/shared/tasks/run-bin-test/linux.yml
      vars:
        image_repository: cloudfoundry/tas-runtime-build
        image_tag: ((.:image_tag))
      params:
        DIR: #@ "src/code.cloudfoundry.org/{}".format(package.name)
#@ end

- name: lint-repo
  serial: true
  plan:
  - in_parallel:
    - get: ci
    - get: repo
      trigger: true
    - get: image
  - task: lint-repo
    file: ci/shared/tasks/lint-repo/linux.yml
    image: image

- name: claim-env
  serial: true
  plan:
  - in_parallel:
    - get: ci
    - get: repo
      trigger: true
      passed:
        - unit-and-integration-tests
        - lint-repo
    - get: image

    - put: env-lock
      params:
        acquire: true
  - put: env
    params:
      action: create
      duration: 176h
      resource: env
      description: "healthchecker-release pipeline"
    timeout: 6h
  - task: wait-for-cf-api
    file: ci/shared/tasks/wait-for-cf-api/linux.yml
    input_mapping:
      toolsmiths-env: env
    image: image

- name: example-app-deployment
  serial: true
  serial_groups: [acceptance]
  plan:
  - in_parallel:
    - get: ci
    - get: repo
      passed: [claim-env]
      trigger: true
    - get: image
    - get: env
      passed: [claim-env]
      trigger: true
  - task: bosh-deploy-example-app
    image: image
    file: ci/shared/tasks/bosh-deploy-manifest/linux.yml
    params:
      MANIFEST: ci/healthchecker-release/manifests/example-app.yml
      DEPLOYMENT_NAME: example-app
      ENVS: |
        DEPLOYMENT_RELEASE_DIR=$PWD/repo

- name: export-release
  serial: true
  serial_groups: [acceptance]
  plan:
  - in_parallel:
    - get: ci
    - get: repo
      passed: [example-app-deployment]
      trigger: true
    - get: image
    - get: env
      passed: [example-app-deployment]
      trigger: true
  - task: export-release
    file: ci/shared/tasks/bosh-export-release/linux.yml
    image: image
    params:
      DEPLOYMENT_NAME: example-app

- name: ship-what
  plan:
    - in_parallel:
        steps:
        - get: ci
        - get: repo
          passed:
            - export-release
          trigger: true
        - get: image
        - get: release-branch
          params:
            submodules: none
        - get: github-release
        - get: version
        - get: env
          passed:
            - export-release
          trigger: true

    - task: check-safe-to-release-repo
      image: image
      file: ci/shared/tasks/check-safe-to-release-repo/linux.yml
      input_mapping:
        release-repo: release-branch

    - task: build-release-notes-healthchecker
      image: image
      file: ci/shared/tasks/build-release-notes/linux.yml
      input_mapping:
        previous-github-release: github-release

- name: ship-it
  serial: true
  plan:
    - in_parallel:
        steps:
        - get: ci
        - get: repo
          passed: [ ship-what ]
        - get: image
        - get: release-branch
          params:
            submodules: none
        - get: github-release
        - get: version
        - get: develop-branch-mergeback
          params:
            submodules: none

    - task: check-safe-to-release-branch
      image: image
      file: ci/shared/tasks/check-safe-to-release-repo/linux.yml
      input_mapping:
        release-repo: release-branch

    - task: build-release-notes-healthchecker
      image: image
      file: ci/shared/tasks/build-release-notes/linux.yml
      input_mapping:
        previous-github-release: github-release

    - task: bosh-finalize-release
      image: image
      file: ci/shared/tasks/bosh-finalize-release/linux.yml
      params:
        GCP_BLOBSTORE_SERVICE_ACCOUNT_KEY: ((gcp-tas-runtime-service-account/config-json))

    - put: release-branch
      params:
        repository: finalized-release-repo
        tag: version/number
        tag_prefix: v

    - task: merge-release-onto-develop
      image: image
      file: ci/shared/tasks/git-merge-branches/linux.yml
      input_mapping:
        source-branch: release-branch
        onto-branch: develop-branch-mergeback
      params:
        SOURCE_BRANCH_NAME: release
        ONTO_BRANCH_NAME: develop

    - in_parallel:
        steps:
        - put: draft-github-release
          params:
            name: version/number
            tag: version/number
            tag_prefix: v
            body: built-release-notes/notes.md
            globs:
            - finalized-release-tarball/healthchecker-*.tgz
        - put: develop-branch-mergeback
          params:
            repository: merged-branch

    - get: next-version
      resource: version
      params: {bump: minor}
    - put: next-version
      resource: version
      params: {file: next-version/number}

- name: unclaim-env
  serial: true
  plan:
  - get: env
    passed: [ship-what]
    trigger: true
  - get: env-lock
  - put: env
    params:
      action: release
      resource: env
  - params:
      release: env-lock #! path to the resource in the above get
    put: env-lock

- name: release-env-lock
  plan:
  - get: env-lock
  ensure:
    put: env-lock
    params:
      release: env-lock #! path to the resource in the above get

#! versioning
- name: patch-bump
  serial_groups: [version]
  plan:
  - get: version
    params: {bump: patch}
  - put: version
    params: {file: version/number}

- name: minor-bump
  serial_groups: [version]
  plan:
  - get: version
    params: {bump: minor}
  - put: version
    params: {file: version/number}

- name: major-bump
  serial_groups: [version]
  plan:
  - get: version
    params: {bump: major}
  - put: version
    params: {file: version/number}
