#@ load("@ytt:data", "data")

#@ load("ytt-helpers.star", "helpers")

#! Define-Groups
groups:
- name: release
  jobs:
  - manual-release-trigger
  - template-tests
  - unit-and-integration-tests
  - lint-repo
  - claim-env
  - prepare-env
  - run-cats
  - run-cf-networking-acceptance-tests
  - run-service-discovery-acceptance-tests
  - run-service-discovery-performance-tests
  - export-release
  - ship-what
  - ship-it

- name: periodics
  jobs:
  - bump-dependencies-go-mod
  - bump-package-golang
  - bump-healthchecker-in-networking-release
  - bump-healthchecker-in-silk-release
  - sync-dot-github-dir-in-networking-release
  - sync-dot-github-dir-in-silk-release
  - sync-readme-in-networking-release
  - sync-readme-in-silk-release

- name: cleanup
  jobs:
  - cleanup-time-gate
  - wait-for-env-lock-claim
  - wait-for-acceptance-tests
  - manual-cleanup-trigger
  - cleanup-env
  - force-cleanup-env
  - release-env-lock

- name: version
  jobs:
  - major-bump
  - minor-bump
  - patch-bump


#! Define-ResourceGroups
resource_types:
- name: slack-notification
  type: docker-image
  source:
    repository: us-central1-docker.pkg.dev/app-runtime-platform-wg/dockerhub-mirror/cfcommunity/slack-notification-resource
    username: _json_key
    password: ((gcp-arp-artifact-registry-service-account-token))
    tag: latest

- name: fork-pool
  type: registry-image
  source:
    repository: ebroberson/pool-resource

#! Define-Resources
resources:
- name: golang-release-latest
  type: git
  icon: tag-outline
  source:
    tag_filter: v*
    uri: https://github.com/bosh-packages/golang-release.git

- name: cf-networking-repo
  type: git
  icon: source-branch
  source:
    branch:  "develop"
    uri: git@github.com:cloudfoundry/cf-networking-release.git
    private_key: ((github-appruntimeplatform-bot/private-key))
    ignore_paths:
    - .github/
    - .gitignore
    - CODEOWNERS
    - LICENSE
    - NOTICE
    - README.md
    - docs/

- name: silk-repo
  type: git
  icon: source-branch
  source:
    branch:  "develop"
    uri: git@github.com:cloudfoundry/silk-release.git
    private_key: ((github-appruntimeplatform-bot/private-key))
    ignore_paths:
    - .github/
    - .gitignore
    - CODEOWNERS
    - LICENSE
    - NOTICE
    - README.md
    - docs/

- name: cf-networking-release-branch
  type: git
  icon: source-branch
  source:
    branch: release
    uri: git@github.com:cloudfoundry/cf-networking-release.git
    private_key: ((github-appruntimeplatform-bot/private-key))

- name: silk-release-branch
  type: git
  icon: source-branch
  source:
    branch: release
    uri: git@github.com:cloudfoundry/silk-release.git
    private_key: ((github-appruntimeplatform-bot/private-key))

- name: cf-networking-develop-branch-mergeback
  type: git
  icon: source-branch
  source:
    branch: develop
    uri: git@github.com:cloudfoundry/cf-networking-release.git
    private_key: ((github-appruntimeplatform-bot/private-key))

- name: silk-develop-branch-mergeback
  type: git
  icon: source-branch
  source:
    branch: develop
    uri: git@github.com:cloudfoundry/silk-release.git
    private_key: ((github-appruntimeplatform-bot/private-key))

#! cf-networking-repo-synced is a write-only resource to prevent readme
#! changes from triggering pipeline runs. See the description of "ignore_path"
#! here for more info: https://github.com/concourse/git-resource
- name: cf-networking-repo-synced
  type: git
  icon: source-branch
  source:
    branch: develop
    uri: git@github.com:cloudfoundry/cf-networking-release.git
    private_key: ((github-appruntimeplatform-bot/private-key))

#! silk-repo-synced is a write-only resource to prevent readme
#! changes from triggering pipeline runs. See the description of "ignore_path"
#! here for more info: https://github.com/concourse/git-resource
- name: silk-repo-synced
  type: git
  icon: source-branch
  source:
    branch: develop
    uri: git@github.com:cloudfoundry/silk-release.git
    private_key: ((github-appruntimeplatform-bot/private-key))

- name: ci
  type: git
  icon: source-branch
  source:
    branch: main
    uri: https://github.com/cloudfoundry/wg-app-platform-runtime-ci

- name: silk-readme
  type: git
  icon: source-branch
  source:
    branch: main
    uri: https://github.com/cloudfoundry/wg-app-platform-runtime-ci
    paths: 
      - shared/*.md
      - silk-release/*.md
      - silk-release/readme/*.md

- name: cf-networking-readme
  type: git
  icon: source-branch
  source:
    branch: main
    uri: https://github.com/cloudfoundry/wg-app-platform-runtime-ci
    paths: 
      - shared/*.md
      - cf-networking-release/*.md
      - cf-networking-release/readme/*.md

- name: cf-deployment
  type: git
  icon: source-branch
  source:
    branch: main
    uri: https://github.com/cloudfoundry/cf-deployment.git

- name: cf-deployment-concourse-tasks
  type: git
  icon: source-branch
  source:
    branch: main
    uri: https://github.com/cloudfoundry/cf-deployment-concourse-tasks.git

- name: cf-acceptance-tests
  type: git
  icon: source-branch
  source:
    branch: release-candidate
    uri: https://github.com/cloudfoundry/cf-acceptance-tests

- name: healthchecker-release
  type: git
  icon: tag-outline
  source:
    uri: git@github.com:cloudfoundry/healthchecker-release.git
    private_key: ((github-appruntimeplatform-bot/private-key))
    branch: release
    tag_filter: v*

#! TIMERS
- name: weekly
  type: time
  icon: clock
  source:
    interval: '168h'
    start: 03:00
    stop: 03:59
    days:
      - Sunday

- name: env-weekly
  type: time
  icon: clock
  source:
    interval: '168h'
    start: 01:00
    stop: 01:59
    days:
      - Monday

- name: cleanup-timer
  type: time
  icon: clock
  source:
    interval: '1h'

- name: manual-release-trigger
  type: time
  source:
    interval: 1m

- name: manual-cleanup-trigger
  type: time
  source:
    interval: 1m

- name: slack-ci-channel
  type: slack-notification
  source:
    url: ((slack-ci-channel/webhook))

- name: env
  type: git
  icon: sheep
  source:
    branch: main
    uri: git@github.com:cloudfoundry/app-runtime-platform-envs
    private_key: ((github-appruntimeplatform-bot/private-key))
    paths:
      - bbl-cfnetworking-env

- name: cf-networking-github-release 
  type: github-release
  icon: github
  source:
    access_token: ((github-appruntimeplatform-bot/access-token))
    repository: cf-networking-release
    owner: cloudfoundry

- name: silk-github-release 
  type: github-release
  icon: github
  source:
    access_token: ((github-appruntimeplatform-bot/access-token))
    repository: silk-release
    owner: cloudfoundry

- name: cf-networking-draft-github-release 
  type: github-release
  icon: github
  source:
    access_token: ((github-appruntimeplatform-bot/access-token))
    drafts: true
    repository: cf-networking-release
    owner: cloudfoundry

- name: silk-draft-github-release 
  type: github-release
  icon: github
  source:
    access_token: ((github-appruntimeplatform-bot/access-token))
    drafts: true
    repository: silk-release
    owner: cloudfoundry

- name: shared-templates
  type: git
  icon: source-branch
  source:
    branch: main
    uri: https://github.com/cloudfoundry/wg-app-platform-runtime-ci
    paths: 
      - shared/github

- name: version
  type: semver
  icon: counter
  source:
    driver: gcs
    bucket: ci-release-versions
    key: cf-networking-release/version #! One version number manages both cf-networking and silk
    json_key: ((gcp-wg-arp-oss-service-account/config-json))

- name: cf-networking-release-env-lock
  type: fork-pool
  icon: cloud-lock
  source:
    branch: main
    pool: cf-networking-release-env-lock
    private_key: ((github-appruntimeplatform-bot/private-key))
    uri: git@github.com:cloudfoundry/runtime-ci-pools.git
    paths: cf-networking-release-env-lock

- name: image
  type: registry-image
  icon: docker
  source:                                        
    repository: us-central1-docker.pkg.dev/app-runtime-platform-wg/dockerhub-mirror/cloudfoundry/tas-runtime-build
    tag: 'latest'
    username: _json_key
    password: ((gcp-arp-artifact-registry-service-account-token))


#! Define-Jobs
jobs:
- name: manual-release-trigger
  plan:
  - put: manual-release-trigger

- name: manual-cleanup-trigger
  plan:
  - put: manual-cleanup-trigger

- name: bump-dependencies-go-mod
  serial: true
  on_failure: &ci-notification
    put: slack-ci-channel
    params:
      text: ":concourse-failed: $BUILD_PIPELINE_NAME failed on <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|$BUILD_JOB_NAME>."
  plan:
  - in_parallel:
      steps:
      - get: ci
      - get: cf-networking-repo
      - get: silk-repo
      - get: image
      - get: weekly
        trigger: true
  - in_parallel:
    - do:
      - task: cf-networking-release-bump-dependencies-go-mod
        image: image
        file: ci/shared/tasks/bump-dependencies-go-mod/linux.yml
        input_mapping:
          repo: cf-networking-repo
        output_mapping:
          bumped-repo: bumped-cf-networking
        params:
          GO_MODS: |
            src/code.cloudfoundry.org/go.mod
            src/example-apps/proxy/go.mod
            src/example-apps/raw-response/go.mod
            src/example-apps/registry/go.mod
            src/example-apps/smoke/go.mod
            src/example-apps/spammer/go.mod
            src/example-apps/tick/go.mod
          EXTRA_GO_TAGS: tools
      - put: cf-networking-repo
        params:
          rebase: true
          repository: bumped-cf-networking
    - do:
      - task: silk-release-bump-dependencies-go-mod
        image: image
        file: ci/shared/tasks/bump-dependencies-go-mod/linux.yml
        input_mapping:
          repo: silk-repo
        output_mapping:
          bumped-repo: bumped-silk
        params:
          GO_MODS: src/code.cloudfoundry.org/go.mod
          EXTRA_GO_TAGS: tools
      - put: silk-repo
        params:
          rebase: true
          repository: bumped-silk

- name: bump-package-golang
  on_failure: *ci-notification
  plan:
  - in_parallel:
    - get: ci
    - get: cf-networking-repo
    - get: silk-repo
    - get: image
    - get: golang-release-latest
      trigger: true

  - in_parallel:
    - do:
      - task: bump-cf-networking-golang-package-name
        file: ci/shared/tasks/bump-golang-package-name/linux.yml
        image: image
        input_mapping:
          repo: cf-networking-repo
        output_mapping:
          bumped-repo: cf-networking-bumped-repo
        params:
          PLATFORM: linux
      - task: bump-cf-netwokring-golang-linux
        file: ci/shared/tasks/bosh-vendor-package/linux.yml
        image: image
        input_mapping:
          package-release: golang-release-latest
          repo: cf-networking-bumped-repo
        output_mapping:
          vendored-repo: cf-networking-vendored-repo
        params:
          PACKAGE_NAME: golang-*-linux
          GCP_BLOBSTORE_SERVICE_ACCOUNT_KEY: ((gcp-wg-arp-oss-service-account/config-json))
      - put: cf-networking-repo
        params:
          rebase: true
          repository: cf-networking-vendored-repo
    - do:
      - task: bump-silk-golang-package-name
        file: ci/shared/tasks/bump-golang-package-name/linux.yml
        image: image
        input_mapping:
          repo: silk-repo
        output_mapping:
          bumped-repo: silk-bumped-repo
        params:
          PLATFORM: linux
      - task: bump-silk-golang-linux
        file: ci/shared/tasks/bosh-vendor-package/linux.yml
        image: image
        input_mapping:
          package-release: golang-release-latest
          repo: silk-bumped-repo
        output_mapping:
          vendored-repo: silk-vendored-repo
        params:
          PACKAGE_NAME: golang-*-linux
          GCP_BLOBSTORE_SERVICE_ACCOUNT_KEY: ((gcp-wg-arp-oss-service-account/config-json))
      - put: silk-repo
        params:
          rebase: true
          repository: silk-vendored-repo

- name: bump-healthchecker-in-networking-release
  on_failure: *ci-notification
  plan:
  - in_parallel:
    - get: ci
    - get: cf-networking-repo
    - get: image
    - get: healthchecker-release
      trigger: true
  - task: bump-healthchecker
    file: ci/shared/tasks/bosh-vendor-package/linux.yml
    image: image
    input_mapping:
      repo: cf-networking-repo
      package-release: healthchecker-release
    params:
      PACKAGE_NAME: healthchecker
      PACKAGE_PREFIX: cf-networking
      GCP_BLOBSTORE_SERVICE_ACCOUNT_KEY: ((gcp-wg-arp-oss-service-account/config-json))
  - put: cf-networking-repo
    params:
      rebase: true
      repository: vendored-repo

- name: bump-healthchecker-in-silk-release
  on_failure: *ci-notification
  plan:
  - in_parallel:
    - get: ci
    - get: silk-repo
    - get: image
    - get: healthchecker-release
      trigger: true
  - task: bump-healthchecker
    file: ci/shared/tasks/bosh-vendor-package/linux.yml
    image: image
    input_mapping:
      repo: silk-repo
      package-release: healthchecker-release
    params:
      PACKAGE_NAME: healthchecker
      PACKAGE_PREFIX: silk
      GCP_BLOBSTORE_SERVICE_ACCOUNT_KEY: ((gcp-wg-arp-oss-service-account/config-json))
  - put: silk-repo
    params:
      rebase: true
      repository: vendored-repo

- name: sync-dot-github-dir-in-networking-release
  serial: true
  plan:
  - in_parallel:
      steps:
      - get: ci
      - get: image
      - get:  cf-networking-repo
      - get: shared-templates
        trigger: true
  - do:
    - task: sync-dot-github-dir
      file: ci/shared/tasks/sync-dot-github-dir/linux.yml
      image: image
      input_mapping:
        repo: cf-networking-repo
    - put: cf-networking-repo-synced
      params:
       rebase: true
       repository: synced-repo

- name: sync-dot-github-dir-in-silk-release
  serial: true
  plan:
  - in_parallel:
      steps:
      - get: ci
      - get: image
      - get:  silk-repo
      - get: shared-templates
        trigger: true
  - do:
    - task: sync-dot-github-dir
      file: ci/shared/tasks/sync-dot-github-dir/linux.yml
      image: image
      input_mapping:
        repo: silk-repo
    - put: silk-repo-synced
      params:
       rebase: true
       repository: synced-repo

- name: sync-readme-in-networking-release
  serial: true
  plan:
  - in_parallel:
      steps:
      - get: ci
      - get: image
      - get:  cf-networking-repo
      - get: weekly
        trigger: true
      - get: cf-networking-readme
        trigger: false
  - do:
    - task: sync-readme
      file: ci/shared/tasks/sync-readme/linux.yml
      image: image
      input_mapping:
        repo:  cf-networking-repo
    - put: cf-networking-repo-synced
      params:
       rebase: true
       repository: synced-repo

- name: sync-readme-in-silk-release
  serial: true
  plan:
  - in_parallel:
      steps:
      - get: ci
      - get: image
      - get:  silk-repo
      - get: weekly
        trigger: true
      - get: silk-readme
        trigger: false
  - do:
    - task: sync-readme
      file: ci/shared/tasks/sync-readme/linux.yml
      image: image
      input_mapping:
        repo:  silk-repo
    - put: silk-repo-synced
      params:
       rebase: true
       repository: synced-repo


- name: template-tests
  serial: true
  plan:
  - in_parallel:
    - get: ci
    - get: cf-networking-repo
      trigger: true
    - get: silk-repo
      trigger: true
    - get: image
  - in_parallel:
    - do:
      - task: cf-networking-template-tests
        image: image
        file: ci/shared/tasks/run-tests-templates/linux.yml
        input_mapping:
          repo: cf-networking-repo
        timeout: 30m
    - do:
      - task: silk-template-tests
        image: image
        file: ci/shared/tasks/run-tests-templates/linux.yml
        input_mapping:
          repo: silk-repo
        timeout: 30m

- name: unit-and-integration-tests
  serial: true
  plan:
  - in_parallel:
    - get: ci
    - get: cf-networking-repo
      trigger: true
    - get: silk-repo
      trigger: true
    - get: image
    - get: package-release
      resource: golang-release-latest
  - in_parallel:
    - do:
      - task: determine-image-tag
        image: image
        input_mapping:
          repo: cf-networking-repo
        file: ci/shared/tasks/determine-image-tag/linux.yml
      - load_var: image_tag
        file: determined-image-tag/tag
#@ for db in data.values.db_flavors:
    - do:
      - task: #@ "determine-image-tag-{}".format(db.image)
        image: image
        file: ci/shared/tasks/determine-image-tag/linux.yml
        input_mapping:
          repo: cf-networking-repo
        output_mapping:
          determined-image-tag: #@ "determined-image-tag-{}".format(db.image)
        params:
          IMAGE: #@ "cloudfoundry/tas-runtime-{}".format(db.image)
      - load_var: #@ "image_tag_{}".format(db.image.replace("-", "_").replace(".", "_"))
        file: #@ "determined-image-tag-{}/tag".format(db.image)
#@ end
  - in_parallel:
#@ for package in helpers.packages_with_configure_db(data.values.internal_repos):
#@ for db in data.values.db_flavors:
    - task: #@ "{}-{}-{}".format(package.repo,package.name,db.image)
      file: ci/shared/tasks/run-bin-test/linux.yml
      privileged: #@ helpers.privileged(package)
      attempts: 3
      vars:
        image_repository: #@ "cloudfoundry/tas-runtime-{}".format(db.image)
        image_password: ((gcp-arp-artifact-registry-service-account-token))
        image_tag: #@ "((.:image_tag_{}))".format(db.image.replace("-", "_").replace(".", "_"))
      params:
        DIR: #@ "src/code.cloudfoundry.org/{}".format(package.name)
        DB: #@ db.value
      input_mapping:
        repo: #@ package.repo
#@ end
#@ end
#@ for package in helpers.packages_without_configure_db(data.values.internal_repos):
    - task: #@ "{}-{}".format(package.repo, package.name)
      file: ci/shared/tasks/run-bin-test/linux.yml
      privileged: #@ helpers.privileged(package)
      vars:
        image_repository: cloudfoundry/tas-runtime-build
        image_password: ((gcp-arp-artifact-registry-service-account-token))
        image_tag: ((.:image_tag))
      attempts: 3
      params:
        DIR: #@ "src/code.cloudfoundry.org/{}".format(package.name)
      input_mapping:
        repo: #@ package.repo
#@ end

- name: lint-repo
  serial: true
  plan:
  - in_parallel:
    - get: ci
    - get: silk-repo 
      trigger: true
    - get: cf-networking-repo
      trigger: true
    - get: image
  - task: lint-cf-networking
    file: ci/shared/tasks/lint-repo/linux.yml
    image: image
    input_mapping:
      repo: cf-networking-repo
  - task: lint-silk
    file: ci/shared/tasks/lint-repo/linux.yml
    image: image
    input_mapping:
      repo: silk-repo

- name: claim-env
  serial: true
  on_abort: &release-env-lock
    do:
      - put: cf-networking-release-env-lock
        params:
          release: cf-networking-release-env-lock
  on_failure: *release-env-lock
  plan:
  - in_parallel:
    - get: manual-release-trigger
      trigger: true
      passed: [ manual-release-trigger ]
    - get: env-weekly
      trigger: true
    - get: ci
    - get: cf-networking-repo
      trigger: false
      passed:
        - template-tests
        - unit-and-integration-tests
        - lint-repo
    - get: silk-repo
      trigger: false
      passed:
        - template-tests
        - unit-and-integration-tests
        - lint-repo
    - get: image
    - get: env
    - get: cf-networking-release-env-lock
  - put: cf-networking-release-env-lock
    params:
      claim: cf-networking-release-env-lock
  - task: start-bbl-envs
    image: image
    file: ci/shared/tasks/start-gcp-instance/linux.yml
    input_mapping:
      bbl-state: env
    params:
      SERVICE_ACCOUNT_KEY: ((gcp-wg-arp-ci-bbl-service-account/config-json))
      BBL_STATE_DIR: bbl-cfnetworking-env
      RESUME: false
  - task: wait-for-bosh-api
    image: image
    file: ci/shared/tasks/wait-for-bosh-api/linux.yml
    params:
      BBL_STATE_DIR: bbl-cfnetworking-env

- name: prepare-env
  serial: true
  on_abort: *release-env-lock
  on_failure: *release-env-lock
  plan:
  - in_parallel:
    - get: manual-release-trigger
      trigger: true
      passed: [ claim-env ]
    - get: ci
    - get: silk-repo
      passed: [claim-env]
      trigger: true
    - get: cf-networking-repo
      trigger: true
      passed: [claim-env]
    - get: image
    - get: cf-deployment
    - get: cf-deployment-concourse-tasks
    - get: env
      passed: [claim-env]
      trigger: true
    - get: cf-networking-release-env-lock
      passed: [ claim-env ]
  - try: &delete-cf-deployment
      do:
        - task: bosh-deld
          image: image
          file: ci/shared/tasks/bosh-deld/linux.yml
          params:
            BBL_STATE_DIR: bbl-cfnetworking-env
            DEPLOYMENT_NAME: cf
  - task: prepare-cf-deployment-env
    attempts: 10
    image: image
    file: ci/shared/tasks/run-bin-prepare-cf-deployment-env/linux.yml
    input_mapping:
      repo: cf-networking-repo
    params:
      BBL_STATE_DIR: bbl-cfnetworking-env
  - task: combine-ops-files
    file: ci/shared/tasks/combine-assets/linux.yml
    image: image
    input_mapping:
      input-01: cf-deployment
    params:
      COPY_ACTIONS: |
        {ci/cf-networking-release/opsfiles/*.yml,combined-assets}
        {ci/shared/opsfiles/add-lb-ca-cert.yml,combined-assets}
        {input-01/operations/use-compiled-releases.yml,combined-assets}
        {input-01/operations/experimental/enable-iptables-logger.yml,combined-assets}
        {ci/shared/opsfiles/scale-for-cats.yml,combined-assets}
  - task: combine-acceptance-test-release-files
    file: ci/shared/tasks/combine-assets/linux.yml
    image: image
    input_mapping:
      input-01: cf-networking-repo
    output_mapping:
      combined-assets: acceptance-test-release
    params:
      COPY_ACTIONS: |
        {input-01/src/code.cloudfoundry.org/test/acceptance-test-release/*,combined-assets}
  - task: upload-dev-releases
    file: ci/shared/tasks/bosh-upload-dev-releases/linux.yml
    image: image
    input_mapping:
      release-01: cf-networking-repo
      release-02: silk-repo
      release-03: acceptance-test-release
    params:
      BBL_STATE_DIR: bbl-cfnetworking-env
  - task: deploy-cf-deployment
    file: cf-deployment-concourse-tasks/bosh-deploy/task.yml
    input_mapping:
      ops-files: combined-assets
      vars-files: prepared-env
      bbl-state: env
    params:
      BBL_STATE_DIR: bbl-cfnetworking-env
      SYSTEM_DOMAIN: bbl-cfnetworking-env.arp.cloudfoundry.org
      DEPLOY_WITH_UPTIME_MEASUREMENTS: "false"
      FAIL_ON_DOWNTIME: "false"
      VARS_FILES: vars.yml
      OPS_FILES: #@ "\n".join(data.values.opsfiles)
  - task: prepare-cf-deployment-env-with-cf-vars
    image: image
    file: ci/shared/tasks/run-bin-prepare-cf-deployment-env/linux.yml
    input_mapping:
      repo: cf-networking-repo
    params:
      BBL_STATE_DIR: bbl-cfnetworking-env
  - task: uptimer-measure-with-cf-networking-and-silk-update
    file: cf-deployment-concourse-tasks/bosh-deploy/task.yml
    input_mapping:
      ops-files: combined-assets
      release: repo
      vars-files: prepared-env
      bbl-state: env
    params:
      BBL_STATE_DIR: bbl-cfnetworking-env
      SYSTEM_DOMAIN: bbl-cfnetworking-env.arp.cloudfoundry.org
      TCP_DOMAIN: tcp.bbl-cfnetworking-env.arp.cloudfoundry.org
      DEPLOY_WITH_UPTIME_MEASUREMENTS: "true"
      APP_PUSHABILITY_THRESHOLD: "20"
      APP_STATS_THRESHOLD: "20"
      HTTP_AVAILABILITY_THRESHOLD: "20"
      TCP_AVAILABILITY_THRESHOLD: "20"
      AVAILABLE_PORT: "-1"
      TCP_PORT: "1029"
      FAIL_ON_DOWNTIME: "true"
      MEASURE_SYSLOG_AVAILABILITY: "false"
      MEASURE_TCP_AVAILABILITY: "true"
      RECENT_LOGS_THRESHOLD: "50"
      STREAMING_LOGS_THRESHOLD: "50"
      APP_SYSLOG_AVAILABILITY_THRESHOLD: "50"
      USE_SINGLE_APP_INSTANCE: "false"
      VARS_FILES: vars.yml
      OPS_FILES: #@ "\n".join(data.values.opsfiles_second_deploy)
  - task: open-asg-for-credhub
    file: cf-deployment-concourse-tasks/open-asgs-for-bosh-instance-group/task.yml
    input_mapping:
      bbl-state: env
    params:
      BBL_STATE_DIR: bbl-cfnetworking-env
      SYSTEM_DOMAIN: bbl-cfnetworking-env.arp.cloudfoundry.org
      INSTANCE_GROUP_NAME: credhub
      SECURITY_GROUP_NAME: credhub
  - task: open-asg-for-uaa
    file: cf-deployment-concourse-tasks/open-asgs-for-bosh-instance-group/task.yml
    input_mapping:
      bbl-state: env
    params:
      BBL_STATE_DIR: bbl-cfnetworking-env
      SYSTEM_DOMAIN: bbl-cfnetworking-env.arp.cloudfoundry.org
      INSTANCE_GROUP_NAME: uaa
      SECURITY_GROUP_NAME: uaa
  - task: enable-feature-flags-for-cats
    file: cf-deployment-concourse-tasks/set-feature-flags/task.yml
    input_mapping:
      bbl-state: env
    params:
      BBL_STATE_DIR: bbl-cfnetworking-env
      SYSTEM_DOMAIN: bbl-cfnetworking-env.arp.cloudfoundry.org
      ENABLED_FEATURE_FLAGS: diego_docker service_instance_sharing

- name: run-cats
  serial: true
  serial_groups: [acceptance]
  plan:
  - in_parallel:
    - get: manual-release-trigger
      trigger: true
      passed: [ prepare-env ]
    - get: ci
    - get: silk-repo
      passed: [prepare-env]
      trigger: true
    - get: cf-networking-repo
      passed: [prepare-env]
      trigger: true
    - get: image
    - get: env
      passed: [prepare-env]
      trigger: true
    - get: cf-deployment-concourse-tasks
    - get: cf-acceptance-tests
    - get: cf-deployment
  - task: create-config
    image: image
    file: ci/shared/tasks/build-acceptance-test-configs/linux.yml
    params:
      CONFIGS: cats
      WITH_ISOSEG: false
      WITH_DYNAMIC_ASG: true
      WITH_COMMA_DELIMITED_ASG_DESTINATIONS: true
      BBL_STATE_DIR: bbl-cfnetworking-env
  - task: cats
    file: cf-deployment-concourse-tasks/run-cats/task.yml
    attempts: 2
    input_mapping:
      integration-config: built-acceptance-test-configs
    params:
      CONFIG_FILE_PATH: cats.json

- name: run-service-discovery-acceptance-tests
  serial: true
  serial_groups: [acceptance]
  plan:
  - in_parallel:
    - get: manual-release-trigger
      trigger: true
      passed: [ prepare-env ]
    - get: ci
    - get: silk-repo
      passed: [prepare-env]
      trigger: true
    - get: cf-networking-repo
      passed: [prepare-env]
      trigger: true
    - get: image
    - get: env
      passed: [prepare-env]
      trigger: true
    - get: cf-deployment-concourse-tasks
    - get: cf-acceptance-tests
    - get: cf-deployment
    - get: package-release
      resource: golang-release-latest
  - task: determine-image-tag
    image: image
    file: ci/shared/tasks/determine-image-tag/linux.yml
    input_mapping:
      repo: cf-networking-repo
  - load_var: image_tag
    file: determined-image-tag/tag
  - task: create-config
    image: image
    file: ci/shared/tasks/build-acceptance-test-configs/linux.yml
    params:
      CONFIGS: service-discovery-acceptance-tests
      WITH_ISOSEG: false 
      WITH_DYNAMIC_ASG: true
      BBL_STATE_DIR: bbl-cfnetworking-env
  - task: service-discovery-acceptance-tests
    file: ci/shared/tasks/run-bin-test/linux.yml
    vars:
      image_repository: cloudfoundry/tas-runtime-build
      image_password: ((gcp-arp-artifact-registry-service-account-token))
      image_tag: ((.:image_tag))
    attempts: 2
    input_mapping:
      repo: cf-networking-repo
      input-01: built-acceptance-test-configs
    params:
      ENVS: |
        CONFIG=$PWD/input-01/service-discovery-acceptance-tests.json
        APPS_DIR=$PWD/repo/src/example-apps
      DIR: src/code.cloudfoundry.org/test/acceptance-sd
      FLAGS: "--procs=1" #!TODO: acceptance tests can't run in parallel, overwrite default ginkgo flag to run in serial


- name: run-cf-networking-acceptance-tests
  serial: true
  serial_groups: [acceptance]
  plan:
  - in_parallel:
    - get: manual-release-trigger
      trigger: true
      passed: [ prepare-env ]
    - get: ci
    - get: silk-repo
      passed: [prepare-env]
      trigger: true
    - get: cf-networking-repo
      passed: [prepare-env]
      trigger: true
    - get: image
    - get: env
      passed: [prepare-env]
      trigger: true
    - get: cf-deployment-concourse-tasks
    - get: cf-acceptance-tests
    - get: cf-deployment
    - get: package-release
      resource: golang-release-latest
  - task: determine-image-tag
    image: image
    file: ci/shared/tasks/determine-image-tag/linux.yml
    input_mapping:
      repo: cf-networking-repo
  - load_var: image_tag
    file: determined-image-tag/tag
  - task: create-config
    image: image
    file: ci/shared/tasks/build-acceptance-test-configs/linux.yml
    params:
      CONFIGS: cf-networking-acceptance-tests
      WITH_ISOSEG: false 
      WITH_DYNAMIC_ASG: true
      BBL_STATE_DIR: bbl-cfnetworking-env
  - task: cf-networking-acceptance-tests
    file: ci/shared/tasks/run-bin-test/linux.yml
    vars:
      image_repository: cloudfoundry/tas-runtime-build
      image_password: ((gcp-arp-artifact-registry-service-account-token))
      image_tag: ((.:image_tag))
    attempts: 10
    input_mapping:
      repo: cf-networking-repo
      input-01: built-acceptance-test-configs
    params:
      ENVS: |
        CONFIG=$PWD/input-01/cf-networking-acceptance-tests.json
        APPS_DIR=$PWD/repo/src/example-apps
      DIR: src/code.cloudfoundry.org/test/acceptance
      FLAGS: "--trace --keep-going --race --randomize-all --timeout 1h  -r --fail-on-pending --nodes=1 --flake-attempts=5" #!TODO: acceptance tests can't run in parallel, overwrite default ginkgo flag to run in serial

- name: run-service-discovery-performance-tests
  serial: true
  plan:
  - in_parallel:
    - get: manual-release-trigger
      trigger: true
      passed: [ prepare-env ]
    - get: cf-networking-repo
      passed: [prepare-env]
      trigger: true
    - get: silk-repo
      passed: [prepare-env]
      trigger: true
    - get: env
      passed: [prepare-env]
      trigger: true
    - get: cf-deployment-concourse-tasks
    - get: ci
    - get: image
  - try: &delete-sdpt-deployment
      do:
        - task: bosh-deld
          image: image
          file: ci/shared/tasks/bosh-deld/linux.yml
          params:
            BBL_STATE_DIR: bbl-cfnetworking-env
            DEPLOYMENT_NAME: service-discovery-performance-tests
  - task: bosh-deploy-performance-sd
    image: image
    file: ci/shared/tasks/bosh-deploy-manifest/linux.yml
    input_mapping:
      repo: cf-networking-repo
    params:
      MANIFEST: ci/cf-networking-release/manifests/performance-sd.yml
      DEPLOYMENT_NAME: service-discovery-performance-tests
      ENVS: |
        DEPLOYMENT_RELEASE_DIR=$PWD/repo
        NATS_IP=10.0.255.190
        NATS_PASSWORD=any-password
        NATS_PORT=4222
        NATS_MONITORING_PORT=8222
      BBL_STATE_DIR: bbl-cfnetworking-env
  - task: service-discovery-performance-tests
    file: cf-deployment-concourse-tasks/run-errand/task.yml
    input_mapping:
      bbl-state: env
    params:
      BBL_STATE_DIR: bbl-cfnetworking-env
      DEPLOYMENT_NAME: service-discovery-performance-tests
      ERRAND_NAME: performance-test-sd

- name: export-release
  serial: true
  plan:
  - in_parallel:
    - get: manual-release-trigger
      trigger: true
      passed: [ prepare-env ]
    - get: ci
    - get: silk-repo
      passed: [prepare-env]
      trigger: true
    - get: cf-networking-repo
      passed: [prepare-env]
      trigger: true
    - get: image
    - get: env
      passed: [prepare-env]
      trigger: true
    - get: cf-deployment-concourse-tasks
  - task: cf-networking-export-release
    file: ci/shared/tasks/bosh-export-release/linux.yml
    image: image
    input_mapping:
      repo: cf-networking-repo
    params:
      BBL_STATE_DIR: bbl-cfnetworking-env
  - task: silk-export-release
    file: ci/shared/tasks/bosh-export-release/linux.yml
    image: image
    input_mapping:
      repo: silk-repo
    params:
      BBL_STATE_DIR: bbl-cfnetworking-env

- name: ship-what
  on_success:
    put: slack-ci-channel
    params:
      text: ":concourse-succeeded: $BUILD_PIPELINE_NAME ship-what just ran. Maybe you should cut a release? $ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME"
  plan:
    - in_parallel:
        steps:
        - get: manual-release-trigger
          trigger: true
          passed:
            - run-cats
            - run-cf-networking-acceptance-tests
            - run-service-discovery-acceptance-tests
            - run-service-discovery-performance-tests
            - export-release
        - get: ci
        - get: silk-repo
          passed:
            - run-cats
            - run-cf-networking-acceptance-tests
            - run-service-discovery-acceptance-tests
            - run-service-discovery-performance-tests
            - export-release
          trigger: true
        - get: cf-networking-repo
          passed:
            - run-cats
            - run-cf-networking-acceptance-tests
            - run-service-discovery-acceptance-tests
            - run-service-discovery-performance-tests
            - export-release
          trigger: true
        - get: image
        - get: cf-networking-release-branch
        - get: silk-release-branch
        - get: cf-networking-github-release
        - get: silk-github-release
        - get: version
    - in_parallel:
        steps:
        - task: check-safe-to-release-cf-networking
          image: image
          file: ci/shared/tasks/check-safe-to-release-repo/linux.yml
          input_mapping:
            repo: cf-networking-repo
            release-repo: cf-networking-release-branch
        - task: check-safe-to-release-silk
          image: image
          file: ci/shared/tasks/check-safe-to-release-repo/linux.yml
          input_mapping:
            repo: silk-repo
            release-repo: silk-release-branch
    - in_parallel:
        steps:
        - task: build-release-notes-cf-networking
          image: image
          file: ci/shared/tasks/build-release-notes/linux.yml
          input_mapping:
            repo: cf-networking-repo
            previous-github-release: cf-networking-github-release
        - task: build-release-notes-silk
          image: image
          file: ci/shared/tasks/build-release-notes/linux.yml
          input_mapping:
            repo: silk-repo
            previous-github-release: silk-github-release

- name: ship-it
  serial: true
  plan:
    - in_parallel:
        steps:
        - get: ci
        - get: cf-networking-repo
          passed: [ ship-what ]
        - get: silk-repo
          passed: [ ship-what ]
        - get: image
        - get: cf-networking-release-branch
        - get: silk-release-branch
        - get: cf-networking-github-release
        - get: silk-github-release
        - get: version
        - get: cf-networking-develop-branch-mergeback
        - get: silk-develop-branch-mergeback
    - in_parallel:
        steps:
        - task: check-safe-to-release-cf-networking
          image: image
          file: ci/shared/tasks/check-safe-to-release-repo/linux.yml
          input_mapping:
            repo: cf-networking-repo
            release-repo: cf-networking-release-branch
        - task: check-safe-to-release-silk
          image: image
          file: ci/shared/tasks/check-safe-to-release-repo/linux.yml
          input_mapping:
            repo: silk-repo
            release-repo: silk-release-branch
    - in_parallel:
        steps:
        - task: build-release-notes-cf-networking
          image: image
          file: ci/shared/tasks/build-release-notes/linux.yml
          input_mapping:
            repo: cf-networking-repo
            previous-github-release: cf-networking-github-release
          output_mapping:
            built-release-notes: built-cf-networking-release-notes
        - task: build-release-notes-silk
          image: image
          file: ci/shared/tasks/build-release-notes/linux.yml
          input_mapping:
            repo: silk-repo
            previous-github-release: silk-github-release
          output_mapping:
            built-release-notes: built-silk-release-notes
    - in_parallel:
        steps:
        - do:
          - task: bosh-finalize-cf-networking-release
            image: image
            file: ci/shared/tasks/bosh-finalize-release/linux.yml
            input_mapping:
              repo: cf-networking-repo
            output_mapping:
              finalized-release-repo: finalized-cf-networking-release-repo
              finalized-release-tarball: finalized-cf-networking-release-tarball
            params:
              GCP_BLOBSTORE_SERVICE_ACCOUNT_KEY: ((gcp-wg-arp-oss-service-account/config-json))
          - put: cf-networking-release-branch
            params:
              repository: finalized-cf-networking-release-repo
              tag: version/number
              tag_prefix: v
          - task: merge-cf-networking-release-onto-develop
            image: image
            file: ci/shared/tasks/git-merge-branches/linux.yml
            input_mapping:
              source-branch: cf-networking-release-branch
              onto-branch: cf-networking-develop-branch-mergeback
            output_mapping:
              merged-branch: cf-networking-merged-branch
            params:
              SOURCE_BRANCH_NAME: release
              ONTO_BRANCH_NAME: develop
          - put: cf-networking-develop-branch-mergeback
            params:
              repository: cf-networking-merged-branch
              merge: true
          - put: cf-networking-draft-github-release
            params:
              name: version/number
              tag: version/number
              tag_prefix: v
              body: built-cf-networking-release-notes/notes.md
              globs:
              - finalized-cf-networking-release-tarball/cf-networking-*.tgz
        - do:
          - task: bosh-finalize-silk-release
            image: image
            file: ci/shared/tasks/bosh-finalize-release/linux.yml
            input_mapping:
              repo: silk-repo
            output_mapping:
              finalized-release-repo: finalized-silk-release-repo
              finalized-release-tarball: finalized-silk-release-tarball
            params:
              GCP_BLOBSTORE_SERVICE_ACCOUNT_KEY: ((gcp-wg-arp-oss-service-account/config-json))
          - put: silk-release-branch
            params:
              repository: finalized-silk-release-repo
              tag: version/number
              tag_prefix: v
          - task: merge-silk-release-onto-develop
            image: image
            file: ci/shared/tasks/git-merge-branches/linux.yml
            input_mapping:
              source-branch: silk-release-branch
              onto-branch: silk-develop-branch-mergeback
            output_mapping:
              merged-branch: silk-merged-branch
            params:
              SOURCE_BRANCH_NAME: release
              ONTO_BRANCH_NAME: develop
          - put: silk-develop-branch-mergeback
            params:
              repository: silk-merged-branch
              merge: true
          - put: silk-draft-github-release
            params:
              name: version/number
              tag: version/number
              tag_prefix: v
              body: built-silk-release-notes/notes.md
              globs:
              - finalized-silk-release-tarball/silk-*.tgz
    - get: next-version
      resource: version
      params: {bump: minor}
    - put: next-version
      resource: version
      params: {file: next-version/number}

- name: cleanup-time-gate
  plan:
  - get: cleanup-timer
    trigger: true

- name: wait-for-env-lock-claim
  serial: true
  plan:
  - get: cleanup-timer
    trigger: true
    passed: [ cleanup-time-gate ]
  - get: cf-networking-release-env-lock
  - put: check-unclaimed-env-lock
    resource: cf-networking-release-env-lock
    params:
      check_unclaimed: cf-networking-release-env-lock
      retry-delay: 60m

- name: wait-for-acceptance-tests
  plan:
  - get: image
  - get: cf-networking-release-env-lock
    passed: [ wait-for-env-lock-claim ]
    trigger: true
  - task: sleep
    image: image
    config:
      platform: linux
      run: 
        path: sh
        args:
        - -exc
        - sleep 4h

- name: cleanup-env
  serial: true
  plan:
  - in_parallel:
      steps:
      - get: ci
      - get: env
      - get: image
      - get: manual-cleanup-trigger
        trigger: true
        passed: [ manual-cleanup-trigger ]
      - get: cf-networking-release-env-lock
        passed: [ wait-for-acceptance-tests ]
        trigger: true
  - try: *delete-sdpt-deployment
  - try: *delete-cf-deployment
  - task: stop-bbl-envs
    image: image
    file: ci/shared/tasks/stop-gcp-instance/linux.yml
    input_mapping:
      bbl-state: env
    params:
      SERVICE_ACCOUNT_KEY: ((gcp-wg-arp-ci-bbl-service-account/config-json))
      BBL_STATE_DIR: bbl-cfnetworking-env
      SUSPEND: false
  - try: *release-env-lock

- name: release-env-lock
  plan:
  - get: cf-networking-release-env-lock
  - try: *release-env-lock

- name: force-cleanup-env
  serial: true
  plan:
  - in_parallel:
      steps:
      - get: ci
      - get: env
      - get: image
  - try: *delete-sdpt-deployment
  - try: *delete-cf-deployment
  - task: stop-bbl-envs
    image: image
    file: ci/shared/tasks/stop-gcp-instance/linux.yml
    input_mapping:
      bbl-state: env
    params:
      SERVICE_ACCOUNT_KEY: ((gcp-wg-arp-ci-bbl-service-account/config-json))
      BBL_STATE_DIR: bbl-cfnetworking-env
      SUSPEND: false

#! versioning
- name: patch-bump
  serial_groups: [version]
  plan:
  - get: version
    params: {bump: patch}
  - put: version
    params: {file: version/number}

- name: minor-bump
  serial_groups: [version]
  plan:
  - get: version
    params: {bump: minor}
  - put: version
    params: {file: version/number}

- name: major-bump
  serial_groups: [version]
  plan:
  - get: version
    params: {bump: major}
  - put: version
    params: {file: version/number}
