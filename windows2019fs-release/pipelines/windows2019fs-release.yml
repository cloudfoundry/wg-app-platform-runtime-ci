#@ load("@ytt:data", "data")
#@ load("ytt-helpers.star", "helpers")

#! Define-Groups
groups:
- name: release
  jobs:
  - bump-windows2019fs-release
  - claim-env
  - prepare-env
  - run-wats
  - export-release
  - ship-what
  - ship-it
  - unclaim-env

- name: periodics
  jobs:
  - bump-dependencies-go-mod
  - bump-package-golang

- name: manual
  jobs:
  - release-env-lock

resource_types:
- name: shepherd
  type: registry-image
  source:
    repository: us-west2-docker.pkg.dev/shepherd-268822/shepherd2/concourse-resource
    tag: v1  #! This may be bumped in the future

#! Define-Resources
resources:
- name: windows2016fs
  type: git
  icon: source-branch
  source:
    branch: main
    uri: https://github.com/cloudfoundry/windows2016fs.git
    paths: [ 2019/IMAGE_TAG ]

- name: repo
  type: git
  icon: source-branch
  source:
    branch: develop
    uri: git@github.com:cloudfoundry/windows2019fs-release.git
    private_key: ((github-tas-runtime-bot/private-key))
    ignore_paths:
    - .github/
    - .gitignore
    - .final_build
    - CODEOWNERS
    - LICENSE
    - NOTICE
    - README*
    - docs/
    - releases/

- name: release-branch 
  type: git
  icon: source-branch
  source:
    uri: git@github.com:cloudfoundry/windows2019fs-release.git
    branch: release
    private_key: ((github-tas-runtime-bot/private-key))

- name: develop-branch-mergeback
  type: git
  icon: source-branch
  source:
    uri: git@github.com:cloudfoundry/windows2019fs-release.git
    branch: develop
    private_key: ((github-tas-runtime-bot/private-key))
    
- name: ci
  type: git
  icon: source-branch
  source:
    branch: main
    uri: https://github.com/cloudfoundry/wg-app-platform-runtime-ci

- name: env-lock
  type: pool
  icon: cloud-lock
  source:
    branch: main
    pool: windows2019fs-release-env-lock 
    private_key: ((github-tas-runtime-bot/private-key))
    uri: git@github.com:cloudfoundry/runtime-ci-pools.git

- name: cf-deployment
  type: git
  icon: source-branch
  source:
    branch: main
    uri: https://github.com/cloudfoundry/cf-deployment.git

- name: cf-deployment-concourse-tasks
  type: git
  icon: source-branch
  source:
    branch: main
    uri: https://github.com/cloudfoundry/cf-deployment-concourse-tasks.git

- name: cf-acceptance-tests
  type: git
  icon: source-branch
  source:
    branch: release-candidate
    uri: https://github.com/cloudfoundry/cf-acceptance-tests

- name: image
  type: registry-image
  icon: docker
  source:                                        
    repository: us-central1-docker.pkg.dev/cf-diego-pivotal/tas-runtime-dockerhub-mirror/cloudfoundry/tas-runtime-build
    username: _json_key
    password: ((gcp-tas-runtime-service-account/config-json))
    tag: 'latest'

- name: env
  type: shepherd
  icon: sheep
  source:
    url: https://v2.shepherd.run
    service-account-key: ((shepherd-service-account-key))
    lease:
      namespace: tas-runtime
      pool:
        namespace: official
        name: cfd
    compatibility-mode: environments-app

- name: github-release
  type: github-release
  icon: github
  source:
    access_token: ((github-tas-runtime-bot/access-token))
    repository: windows2019fs-release
    owner: cloudfoundry

- name: draft-github-release 
  type: github-release
  icon: github
  source:
    access_token: ((github-tas-runtime-bot/access-token))
    drafts: true
    repository: windows2019fs-release
    owner: cloudfoundry

- name: version
  type: semver
  icon: counter
  source:
    driver: gcs
    bucket: ci-release-versions
    key: windows2019fs-release//version
    json_key: ((gcp-tas-runtime-service-account/config-json))
    initial_version: 2.63.0

- name: go-version
  type: git
  icon: source-branch
  source:
    branch: main
    uri: https://github.com/cloudfoundry/wg-app-platform-runtime-ci
    paths: [go-version.json]

- name: golang-release-latest
  type: git
  icon: tag-outline
  source:
    tag_filter: v*
    uri: https://github.com/bosh-packages/golang-release.git

- name: weekly
  type: time
  icon: clock
  source:
    interval: '168h'
    start: 05:00
    stop: 05:59
    days:
      - Wednesday

#! Define-Jobs
jobs:
- name: bump-dependencies-go-mod
  serial: true
  plan:
  - in_parallel:
      steps:
      - get: ci
      - get: repo
      - get: image
      - get: weekly
        trigger: true
  - task: windows2019fs-release-bump-dependencies-go-mod
    image: image
    file: ci/shared/tasks/bump-dependencies-go-mod/linux.yml
  - put: repo
    params:
      rebase: true
      repository: bumped-repo

- name: bump-package-golang
  plan:
  - in_parallel:
    - get: ci
    - get: repo
    - get: image
    - get: go-version
      trigger: true
    - get: golang-release-latest
      trigger: true

  - task: bump-golang-package-name
    image: image
    file: ci/shared/tasks/bump-golang-package-name/linux.yml
    params:
      PLATFORM: windows

  - task: bump-golang-linux
    file: ci/shared/tasks/bosh-vendor-package/linux.yml
    image: image
    input_mapping:
      repo: bumped-repo
      package-release: golang-release-latest
    params:
      PACKAGE_NAME: golang-*-windows
      AWS_ACCESS_KEY_ID: ((aws-s3-svc-gdn-win-bosh-s3/access-key-id))
      AWS_SECRET_ACCESS_KEY: ((aws-s3-svc-gdn-win-bosh-s3/secret-access-key))
      AWS_ASSUME_ROLE_ARN: ((aws-s3-svc-gdn-win-bosh-s3/assume-role))

  - put: repo
    params:
      rebase: true
      repository: vendored-repo

- name: bump-windows2019fs-release
  serial: true
  plan:
  - in_parallel:
    - get: ci
    - get: repo
    - get: windows2016fs
      trigger: true
    - get: image
    - get: package-release
      resource: golang-release-latest
  - task: determine-image-tag
    image: image
    file: ci/shared/tasks/determine-image-tag/linux.yml
    params:
      PLUGIN: src/code.cloudfoundry.org/hydrator
  - load_var: image_tag
    file: determined-image-tag/tag
  - task: combine-assets
    file: ci/shared/tasks/combine-assets/linux.yml
    image: image
    input_mapping:
      input-01: windows2016fs
    output_mapping:
      combined-assets: version
    params:
      COPY_ACTIONS: |
        {input-01/2019/IMAGE_TAG,combined-assets/version}
  - task: build-binaries
    file: ci/shared/tasks/build-binaries/linux.yml
    params:
      DEFAULT_PARAMS: "ci/windows2019fs-release/default-params/build-binaries/linux.yml"
    vars:
      image_repository: cloudfoundry/tas-runtime-build
      image_password: ((gcp-tas-runtime-service-account/config-json))
      image_tag: ((.:image_tag))
  - task: bump-repo-windows2019fs-release-version
    file: ci/shared/tasks/bump-repo-version-file/linux.yml
    image: image
    params:
      BUMP_ACTION: |
        blob_version=$(grep windows2019fs config/blobs.yml |  grep -o '[0-9]\+.[0-9]\+.[0-9]\+')
        mkdir -p ../blobs/windows2019fs
        $HYDRATOR_BINARY download -image cloudfoundry/windows2016fs -outputDir ../blobs/windows2019fs -tag ${VERSION}

        bosh remove-blob "windows2019fs/windows2016fs-$blob_version.tgz"
        bosh add-blob "../blobs/windows2019fs/windows2016fs-${VERSION}.tgz" "windows2019fs/windows2016fs-${VERSION}.tgz"
  - put: repo
    params:
      rebase: true
      repository: bumped-repo

- name: claim-env
  serial: true
  plan:
  - in_parallel:
    - get: ci
    - get: repo
      trigger: true
      passed:
        - bump-windows2019fs-release
    - get: image
    - put: env-lock
      params:
       acquire: true
    - get: windows2016fs
      passed:
        - bump-windows2019fs-release
  - put: env
    params:
      action: create
      duration: 48h
      resource: env
    timeout: 6h

- name: prepare-env
  serial: true
  plan:
  - in_parallel:
    - get: ci
    - get: repo
      trigger: true
      passed: [claim-env]
    - get: image
    - get: cf-deployment
    - get: cf-deployment-concourse-tasks
    - get: env
      passed: [claim-env]
      trigger: true
    - get: windows2016fs
      passed: [claim-env]
    - get: package-release
      resource: golang-release-latest
  - task: determine-image-tag
    image: image
    file: ci/shared/tasks/determine-image-tag/linux.yml
    params:
      PLUGIN: src/code.cloudfoundry.org/hydrator
  - load_var: image_tag
    file: determined-image-tag/tag
  - task: combine-assets
    file: ci/shared/tasks/combine-assets/linux.yml
    image: image
    input_mapping:
      input-01: windows2016fs
    output_mapping:
      combined-assets: version
    params:
      COPY_ACTIONS: |
        {input-01/2019/IMAGE_TAG,combined-assets/version}
  - task: build-binaries
    file: ci/shared/tasks/build-binaries/linux.yml
    params:
      DEFAULT_PARAMS: "ci/windows2019fs-release/default-params/build-binaries/linux.yml"
    vars:
      image_repository: cloudfoundry/tas-runtime-build
      image_password: ((gcp-tas-runtime-service-account/config-json))
      image_tag: ((.:image_tag))
  - task: bump-repo-windows2019fs-release-version
    file: ci/shared/tasks/bump-repo-version-file/linux.yml
    image: image
    params:
      BUMP_ACTION: |
        blob_version=$(grep windows2019fs config/blobs.yml |  grep -o '[0-9]\+.[0-9]\+.[0-9]\+')
        mkdir -p ../blobs/windows2019fs
        $HYDRATOR_BINARY download -image cloudfoundry/windows2016fs -outputDir ../blobs/windows2019fs -tag ${VERSION}

        bosh remove-blob "windows2019fs/windows2016fs-$blob_version.tgz"
        bosh add-blob "../blobs/windows2019fs/windows2016fs-${VERSION}.tgz" "windows2019fs/windows2016fs-${VERSION}.tgz"
  - task: prepare-cf-deployment-env
    image: image
    file: ci/shared/tasks/run-bin-prepare-cf-deployment-env/linux.yml
  - task: combine-ops-files
    file: ci/shared/tasks/combine-assets/linux.yml
    image: image
    input_mapping:
      input-01: cf-deployment
    params:
      COPY_ACTIONS: |
        {input-01/operations/use-compiled-releases.yml,combined-assets}
        {input-01/operations/experimental/use-compiled-releases-windows.yml,combined-assets}
        {input-01/operations/windows2019-cell.yml,combined-assets}
        {input-01/operations/use-offline-windows2019fs.yml,combined-assets}
  - task: deploy-cf-deployment-with-windows2019fs-release
    file: cf-deployment-concourse-tasks/bosh-deploy-with-created-release/task.yml
    input_mapping:
      ops-files: combined-assets
      release: bumped-repo
      vars-files: prepared-env
      toolsmiths-env: env
    params:
      DEPLOY_WITH_UPTIME_MEASUREMENTS: "false"
      FAIL_ON_DOWNTIME: "false"
      VARS_FILES: vars.yml
      OPS_FILES: #@ "\n".join(data.values.opsfiles)
  - task: open-asg-for-credhub
    file: cf-deployment-concourse-tasks/open-asgs-for-bosh-instance-group/task.yml
    input_mapping:
      toolsmiths-env: env
    params:
      INSTANCE_GROUP_NAME: credhub
      SECURITY_GROUP_NAME: credhub
  - task: open-asg-for-uaa
    file: cf-deployment-concourse-tasks/open-asgs-for-bosh-instance-group/task.yml
    input_mapping:
      toolsmiths-env: env
    params:
      INSTANCE_GROUP_NAME: uaa
      SECURITY_GROUP_NAME: uaa
  - task: enable-feature-flags-for-cats
    file: cf-deployment-concourse-tasks/set-feature-flags/task.yml
    input_mapping:
      toolsmiths-env: env
    params:
      ENABLED_FEATURE_FLAGS: diego_docker service_instance_sharing

- name: run-wats
  serial: true
  serial_groups: [acceptance]
  plan:
  - in_parallel:
    - get: ci
    - get: repo
      passed: [prepare-env]
      trigger: true
    - get: image
    - get: env
      passed: [prepare-env]
      trigger: true
    - get: windows2016fs
      passed: [prepare-env]
    - get: cf-deployment-concourse-tasks
    - get: cf-acceptance-tests
    - get: cf-deployment
  - task: create-cats-config
    image: image
    file: ci/shared/tasks/build-acceptance-test-configs/linux.yml
    params:
      CONFIGS: wats
      WITH_ISOSEG: true
      WITH_DYNAMIC_ASG: true
  - task: wats
    file: cf-deployment-concourse-tasks/run-cats/task.yml
    attempts: 2
    input_mapping:
      integration-config: built-acceptance-test-configs
    params:
      CONFIG_FILE_PATH: wats.json
      NODES: "4"
      SKIP_REGEXP: Syslog drain

- name: export-release
  serial: true
  serial_groups: [acceptance]
  plan:
  - in_parallel:
    - get: ci
    - get: repo
      passed: [prepare-env]
      trigger: true
    - get: image
    - get: env
      passed: [prepare-env]
      trigger: true
    - get: windows2016fs
      passed: [prepare-env]
    - get: cf-deployment-concourse-tasks
  - task: export-release
    file: ci/shared/tasks/bosh-export-release/linux.yml
    image: image
    params:
      OS: windows

- name: ship-what
  plan:
    - in_parallel:
        steps:
        - get: ci
        - get: repo
          passed:
            - run-wats
            - export-release
          trigger: true
        - get: image
        - get: release-branch
          params:
            submodules: none
        - get: github-release
        - get: version
        - get: env
          passed:
            - run-wats
            - export-release
          trigger: true
        - get: windows2016fs
          passed:
            - run-wats
            - export-release

    - task: check-safe-to-release-repo
      image: image
      file: ci/shared/tasks/check-safe-to-release-repo/linux.yml
      input_mapping:
        release-repo: release-branch

    - task: extract-metadata
      file: ci/shared/tasks/combine-assets/linux.yml
      image: image
      input_mapping:
        input-01: windows2016fs
      output_mapping:
        combined-assets: extra-metadata
      params:
        COPY_ACTIONS: |
          {input-01/2019/kb-metadata,combined-assets}

    - task: build-release-notes-windows2019fs-release
      image: image
      file: ci/shared/tasks/build-release-notes/linux.yml
      input_mapping:
        previous-github-release: github-release

- name: ship-it
  serial: true
  plan:
    - in_parallel:
        steps:
        - get: ci
        - get: repo
          passed: [ ship-what ]
        - get: image
        - get: release-branch
          params:
            submodules: none
        - get: github-release
        - get: version
        - get: develop-branch-mergeback
          params:
            submodules: none
        - get: windows2016fs
          passed: [ ship-what ]

    - task: check-safe-to-release-branch
      image: image
      file: ci/shared/tasks/check-safe-to-release-repo/linux.yml
      input_mapping:
        release-repo: release-branch

    - task: extract-metadata
      file: ci/shared/tasks/combine-assets/linux.yml
      image: image
      input_mapping:
        input-01: windows2016fs
      output_mapping:
        combined-assets: extra-metadata
      params:
        COPY_ACTIONS: |
          {input-01/2019/kb-metadata,combined-assets}

    - task: build-release-notes-windows2019fs-release
      image: image
      file: ci/shared/tasks/build-release-notes/linux.yml
      input_mapping:
        previous-github-release: github-release

    - task: add-version-file-to-release
      file: ci/shared/tasks/bump-repo-version-file/linux.yml
      image: image
      params:
        BUMP_ACTION: |
          echo -n "${VERSION}" > VERSION

    - put: release-branch
      params:
        repository: bumped-repo
        tag: version/number
        tag_prefix: v

    - task: merge-release-onto-develop
      image: image
      file: ci/shared/tasks/git-merge-branches/linux.yml
      input_mapping:
        source-branch: release-branch
        onto-branch: develop-branch-mergeback
      params:
        SOURCE_BRANCH_NAME: release
        ONTO_BRANCH_NAME: develop

    - in_parallel:
        steps:
        - put: draft-github-release
          params:
            name: version/number
            tag: version/number
            tag_prefix: v
            body: built-release-notes/notes.md
        - put: develop-branch-mergeback
          params:
            repository: merged-branch
            merge: true

    - get: next-version
      resource: version
      params: {bump: minor}
    - put: next-version
      resource: version
      params: {file: next-version/number}

- name: unclaim-env
  serial: true
  plan:
  - get: env
    passed: [ship-what]
    trigger: true
  - get: env-lock
  - put: env
    params:
      action: release
      resource: env
  - params:
      release: env-lock #! path to the resource in the above get
    put: env-lock

- name: release-env-lock
  plan:
  - get: env-lock
  - try:
      do:
      - get: env
        passed: [claim-env]
      - put: env
        params:
          action: release
          resource: env
  ensure:
    put: env-lock
    params:
      release: env-lock #! path to the resource in the above get
