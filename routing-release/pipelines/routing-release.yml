#@ load("@ytt:data", "data")
#@ load("ytt-helpers.star", "helpers")

#! Define-Groups
groups:
- name: release
  jobs:
  - release-time-gate
  - manual-release-trigger
  - template-tests
  - unit-and-integration-tests
  - lint-repo
  - claim-env
  - prepare-env
  - run-cats
  - run-drats
  - run-rats
  - run-cfsmoke
  - export-release
  - run-cipher-suite
  - ship-what
  - ship-it

- name: periodics
  jobs:
  - bump-dependencies-go-mod
  - bump-package-golang
  - bump-package-healthchecker
  - bump-package-cf-cli
  - bump-bosh-blobs
  - sync-dot-github-dir
  - sync-readme

- name: cleanup
  jobs:
  - cleanup-time-gate
  - wait-for-env-lock-claim
  - wait-for-acceptance-tests
  - manual-cleanup-trigger
  - cleanup-env
  - force-cleanup-env
  - release-env-lock

- name: version
  jobs:
  - major-bump
  - minor-bump
  - patch-bump

- name: routing-api-cli
  jobs:
  - release-routing-api-cli

resource_types:
- name: slack-notification
  type: docker-image
  source:
    repository: cfcommunity/slack-notification-resource
    tag: latest

- name: fork-pool
  type: registry-image
  source:
    repository: ebroberson/pool-resource

resources:
#! REPOS
- name: cipher-test-release
  type: git
  icon: source-branch
  source:
    branch: master
    uri: https://github.com/cf-routing/cipher-test-release

- name: golang-release-latest
  type: git
  icon: tag-outline
  source:
    tag_filter: v*
    uri: https://github.com/bosh-packages/golang-release.git

- name: repo
  type: git
  icon: source-branch
  source:
    branch: develop
    uri: git@github.com:cloudfoundry/routing-release.git
    private_key: ((github-appruntimeplatform-bot/private-key))
    ignore_paths:
    - .github/
    - .gitignore
    - .final_builds/
    - CODEOWNERS
    - LICENSE
    - NOTICE
    - README.md
    - docs/
    - releases/

#! repo-synced is a write-only resource to prevent readme
#! changes from triggering pipeline runs. See the description of "ignore_path"
#! here for more info: https://github.com/concourse/git-resource
- name: repo-synced
  type: git
  icon: git
  source:
    branch: develop
    uri: git@github.com:cloudfoundry/routing-release.git
    private_key: ((github-appruntimeplatform-bot/private-key))

- name: release-branch 
  type: git
  icon: source-branch
  source:
    uri: git@github.com:cloudfoundry/routing-release.git
    branch: release
    private_key: ((github-appruntimeplatform-bot/private-key))

- name: develop-branch-mergeback
  type: git
  icon: source-branch
  source:
    uri: git@github.com:cloudfoundry/routing-release.git
    branch: develop
    private_key: ((github-appruntimeplatform-bot/private-key))

- name: cf-cli-release
  type: git
  icon: tag-outline
  source:
    tag_filter: v*
    uri: https://github.com/bosh-packages/cf-cli-release.git
    branch: main

- name: healthchecker-release
  type: git
  icon: tag-outline
  source:
    uri: git@github.com:cloudfoundry/healthchecker-release.git
    private_key: ((github-appruntimeplatform-bot/private-key))
    branch: release
    tag_filter: v*

- name: disaster-recovery-acceptance-tests
  type: git
  icon: source-branch
  source:
    branch: main
    uri: https://github.com/cloudfoundry/disaster-recovery-acceptance-tests.git

- name: bbr-binary-release
  type: github-release
  icon: github
  check_every: '5m'
  source:
    user: cloudfoundry-incubator
    repository: bosh-backup-and-restore
    access_token: ((github-appruntimeplatform-bot/access-token))

- name: ci
  type: git
  icon: source-branch
  source:
    branch: main
    uri: https://github.com/cloudfoundry/wg-app-platform-runtime-ci

- name: go-version
  type: git
  icon: source-branch
  source:
    branch: main
    uri: https://github.com/cloudfoundry/wg-app-platform-runtime-ci
    paths: [go-version.json]

- name: shared-templates
  type: git
  icon: source-branch
  source:
    branch: main
    uri: https://github.com/cloudfoundry/wg-app-platform-runtime-ci
    paths: 
      - shared/github
      - routing-release/github

- name: readme
  type: git
  icon: source-branch
  source:
    branch: main
    uri: https://github.com/cloudfoundry/wg-app-platform-runtime-ci
    paths: 
      - shared/*.md
      - routing-release/*.md
      - routing-release/readme/*.md

#@ for repo in data.values.internal_repos:
- name: #@ "{}-repo".format(repo.name)
  type: git
  icon: source-branch
  source:
    branch: main
    uri: #@ "git@github.com:cloudfoundry/{}.git".format(repo.name)
    private_key: ((github-appruntimeplatform-bot/private-key))
#@ end

#! CF Deployment
- name: cf-deployment
  type: git
  icon: source-branch
  source:
    branch: main
    uri: https://github.com/cloudfoundry/cf-deployment.git

- name: cf-smoke-tests-release
  type: git
  icon: source-branch
  source:
    branch: main
    uri: https://github.com/cloudfoundry/cf-smoke-tests-release.git

#! Concourse Tasks
- name: cf-deployment-concourse-tasks
  type: git
  icon: source-branch
  source:
    branch: main
    uri: https://github.com/cloudfoundry/cf-deployment-concourse-tasks.git

- name: cf-acceptance-tests
  type: git
  icon: source-branch
  source:
    branch: release-candidate
    uri: https://github.com/cloudfoundry/cf-acceptance-tests

#! STEMCELLS
- name: gcp-stemcell-bionic
  type: bosh-io-stemcell
  icon: tag-outline
  source:
    name: bosh-google-kvm-ubuntu-bionic-go_agent

#! TIMERS
- name: weekly
  type: time
  icon: clock
  source:
    interval: '168h'
    start: 02:00
    stop: 02:59
    days:
      - Sunday

- name: env-weekly
  type: time
  icon: clock
  source:
    initial_version: true
    interval: '168h'
    start: 01:00
    stop: 01:59
    days:
      - Monday

- name: cleanup-timer
  type: time
  icon: clock
  source:
    interval: '1h'

- name: manual-release-trigger
  type: time
  source:
    interval: '1m'

- name: manual-cleanup-trigger
  type: time
  source:
    interval: '1m'

- name: slack-ci-channel
  type: slack-notification
  source:
    url: ((slack-ci-channel/webhook))

#! Deployment Environment pool
- name: env
  type: git
  icon: sheep
  source:
    branch: main
    uri: git@github.com:cloudfoundry/app-runtime-platform-envs
    private_key: ((github-appruntimeplatform-bot/private-key))
    paths:
      - bbl-routing-env

- name: github-release
  type: github-release
  icon: github
  source:
    access_token: ((github-appruntimeplatform-bot/access-token))
    repository: routing-release
    owner: cloudfoundry

- name: draft-github-release 
  type: github-release
  icon: github
  source:
    access_token: ((github-appruntimeplatform-bot/access-token))
    drafts: true
    repository: routing-release
    owner: cloudfoundry

- name: version
  type: semver
  icon: counter
  source:
    driver: gcs
    bucket: ci-release-versions
    key: routing-release/version
    json_key: ((gcp-wg-arp-oss-service-account/config-json))

- name: routing-api-cli-github-release
  type: github-release
  icon: github
  check_every: '5m'
  source:
    user: cloudfoundry
    repository: routing-api-cli
    access_token: ((github-appruntimeplatform-bot/access-token))

- name: routing-api-cli-version
  type: semver
  icon: counter
  source:
    json_key: ((gcp-wg-arp-oss-service-account/config-json))
    bucket: ci-release-versions
    key: routing-api-cli/version
    initial_version: 2.24.0
    driver: gcs

- name: routing-release-env-lock
  type: fork-pool
  icon: cloud-lock
  source:
    branch: main
    pool: routing-release-env-lock 
    private_key: ((github-appruntimeplatform-bot/private-key))
    uri: git@github.com:cloudfoundry/runtime-ci-pools.git
    paths: routing-release-env-lock 

- name: image
  type: registry-image
  icon: docker
  source:                                        
    repository: us-central1-docker.pkg.dev/cf-diego-pivotal/tas-runtime-dockerhub-mirror/cloudfoundry/tas-runtime-build
    username: _json_key
    password: ((gcp-wg-arp-service-account/config-json))
    tag: 'latest'

- name: jq
  type: github-release
  icon: github
  source:
    owner: jqlang
    repository: jq

- name: haproxy
  type: git
  icon: tag-outline
  source:
    uri: https://git.haproxy.org/git/haproxy-2.8.git
    tag_filter: v*
    

jobs:
- name: manual-release-trigger
  plan:
  - put: manual-release-trigger

- name: manual-cleanup-trigger
  plan:
  - put: manual-cleanup-trigger

- name: bump-dependencies-go-mod
  serial: true
  on_failure: &ci-notification
    put: slack-ci-channel
    params:
      text: ":concourse-failed: $BUILD_PIPELINE_NAME failed on <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|$BUILD_JOB_NAME>."
  plan:
  - in_parallel:
      steps:
      - get: ci
      - get: repo
      - get: image
      - get: weekly
        trigger: true
  - task: routing-release-bump-dependencies-go-mod
    image: image
    file: ci/shared/tasks/bump-dependencies-go-mod/linux.yml
    params:
      GO_MODS: |
        src/code.cloudfoundry.org/go.mod
        src/routing_utils/nats_client/go.mod
      EXTRA_GO_TAGS: tools
  - put: repo
    params:
      rebase: true
      repository: bumped-repo

- name: bump-package-golang
  on_failure: *ci-notification
  plan:
  - in_parallel:
    - get: ci
    - get: go-version
      trigger: true
    - get: repo
    - get: image
    - get: golang-release-latest
      trigger: true

  - task: bump-golang-package-name
    image: image
    file: ci/shared/tasks/bump-golang-package-name/linux.yml
    params:
      PLATFORM: linux

  - task: bump-golang-linux
    file: ci/shared/tasks/bosh-vendor-package/linux.yml
    image: image
    input_mapping:
      repo: bumped-repo
      package-release: golang-release-latest
    params:
      PACKAGE_NAME: golang-*-linux
      GCP_BLOBSTORE_SERVICE_ACCOUNT_KEY: ((gcp-wg-arp-oss-service-account/config-json))

  - put: repo
    params:
      rebase: true
      repository: vendored-repo

- name: bump-package-cf-cli
  on_failure: *ci-notification
  plan:
  - in_parallel:
    - get: ci
    - get: repo
    - get: image
    - get: cf-cli-release
      trigger: true
  - task: bump-cf-cli
    image: image
    file: ci/shared/tasks/bosh-vendor-package/linux.yml
    input_mapping:
      package-release: cf-cli-release
    params:
      PACKAGE_NAME: cf-cli-8-linux
      GCP_BLOBSTORE_SERVICE_ACCOUNT_KEY: ((gcp-wg-arp-oss-service-account/config-json))
  - put: repo
    params:
      rebase: true
      repository: vendored-repo

- name: bump-package-healthchecker
  on_failure: *ci-notification
  plan:
  - in_parallel:
    - get: ci
    - get: repo
    - get: image
    - get: healthchecker-release
      trigger: true
  - task: bump-healthchecker
    file: ci/shared/tasks/bosh-vendor-package/linux.yml
    image: image
    input_mapping:
      package-release: healthchecker-release
    params:
      PACKAGE_NAME: healthchecker
      PACKAGE_PREFIX: routing
      GCP_BLOBSTORE_SERVICE_ACCOUNT_KEY: ((gcp-wg-arp-oss-service-account/config-json))
  - put: repo
    params:
      rebase: true
      repository: vendored-repo

- name: bump-bosh-blobs
  serial: true
  on_failure: *ci-notification
  plan:
  - in_parallel:
      steps:
      - get: ci
      - get: repo
      - get: image
      - get: jq
        params:
          globs:
          - jq-linux-amd64 
        trigger: true
      - get: haproxy
        params:
          fetch_tags: true
        trigger: true
  - do:
    - task: bump-bosh-blob-jq
      image: image
      file: ci/shared/tasks/bump-bosh-blobs/linux.yml
      input_mapping:
        blob: jq
      params:
        BOSH_BLOB_PATH: jq/jq-*-linux-amd64.tgz 
        GCP_BLOBSTORE_SERVICE_ACCOUNT_KEY: ((gcp-wg-arp-oss-service-account/config-json))
    - put: repo
      params:
       rebase: true
       repository: bumped-repo
  - do:
    - task: bump-bosh-blob-haproxy
      image: image
      file: ci/shared/tasks/bump-bosh-blobs/linux.yml
      input_mapping:
        blob: haproxy
      params:
        BOSH_BLOB_PATH: haproxy/haproxy-*.tar.gz 
        GCP_BLOBSTORE_SERVICE_ACCOUNT_KEY: ((gcp-wg-arp-oss-service-account/config-json))
    - put: repo
      params:
       rebase: true
       repository: bumped-repo

- name: sync-dot-github-dir
  serial: true
  plan:
  - in_parallel:
      steps:
      - get: ci
      - get: image
      - get: repo
#@ for repo in data.values.internal_repos:
      - get: #@ "{}-repo".format(repo.name)
#@ end
      - get: shared-templates
        trigger: true
  - do:
    - task: sync-dot-github-dir-routing-release
      file: ci/shared/tasks/sync-dot-github-dir/linux.yml
      image: image
      params:
        PARENT_TEMPLATE_DIR: routing-release
    - put: repo-synced
      params:
       rebase: true
       repository: synced-repo
#@ for repo in data.values.internal_repos:
  - do:
    - task: #@ "sync-dot-github-dir-{}".format(repo.name)
      file: ci/shared/tasks/sync-dot-github-dir/linux.yml
      image: image
      input_mapping:
        repo: #@ "{}-repo".format(repo.name)
      params:
        PARENT_TEMPLATE_DIR: routing-release
    - put: #@ "{}-repo".format(repo.name)
      params:
       rebase: true
       repository: synced-repo
#@ end

- name: sync-readme
  serial: true
  plan:
  - in_parallel:
      steps:
      - get: ci
      - get: image
      - get: weekly
        trigger: true
      - get: repo
#@ for repo in data.values.internal_repos:
      - get: #@ "{}-repo".format(repo.name)
#@ end
        trigger: false
      - get: readme
        trigger: false
  - do:
    - task: sync-readme
      file: ci/shared/tasks/sync-readme/linux.yml
      image: image
    - put: repo-synced
      params:
       rebase: true
       repository: synced-repo
#@ for repo in data.values.internal_repos:
  - do:
    - task: #@ "sync-readme-{}".format(repo.name)
      file: ci/shared/tasks/sync-readme/linux.yml
      image: image
      input_mapping:
        repo: #@ "{}-repo".format(repo.name)
    - put: #@ "{}-repo".format(repo.name)
      params:
       rebase: true
       repository: synced-repo
#@ end

- name: template-tests
  serial: true
  plan:
  - in_parallel:
    - get: ci
    - get: repo
      trigger: true
    - get: image
  - task: template-tests
    image: image
    file: ci/shared/tasks/run-tests-templates/linux.yml
    timeout: 30m

- name: unit-and-integration-tests
  serial: true
  plan:
  - in_parallel:
    - get: ci
    - get: repo
      trigger: true
    - get: image
    - get: package-release
      resource: golang-release-latest
  - in_parallel:
    - do:
      - task: determine-image-tag
        image: image
        file: ci/shared/tasks/determine-image-tag/linux.yml
      - load_var: image_tag
        file: determined-image-tag/tag
#@ for db in data.values.db_flavors:
    - do:
      - task: #@ "determine-image-tag-{}".format(db.image)
        image: image
        file: ci/shared/tasks/determine-image-tag/linux.yml
        output_mapping:
          determined-image-tag: #@ "determined-image-tag-{}".format(db.image)
        params:
          IMAGE: #@ "cloudfoundry/tas-runtime-{}".format(db.image)
      - load_var: #@ "image_tag_{}".format(db.image.replace("-", "_").replace(".", "_"))
        file: #@ "determined-image-tag-{}/tag".format(db.image)
#@ end
  - task: build-binaries
    file: ci/shared/tasks/build-binaries/linux.yml
    vars:
      image_repository: cloudfoundry/tas-runtime-mysql-5.7 #! build with older version of ubuntu because of GLIB_C bump so that binaries could still be executed in mysql-5.7
      image_password: ((gcp-wg-arp-service-account/config-json))
      image_tag: ((.:image_tag_mysql_5_7))
    params:
      DEFAULT_PARAMS: "ci/routing-release/default-params/build-binaries/linux.yml"
#@ for package in helpers.packages_with_configure_db(data.values.internal_repos):
  - in_parallel:
#@ for db in data.values.db_flavors:
    - task: #@ "{}-{}".format(package.name,db.image)
      file: ci/shared/tasks/run-bin-test/linux.yml
      attempts: 3
      vars:
        image_repository: #@ "cloudfoundry/tas-runtime-{}".format(db.image)
        image_password: ((gcp-wg-arp-service-account/config-json))
        image_tag: #@ "((.:image_tag_{}))".format(db.image.replace("-", "_").replace(".", "_"))
      params:
        DIR: #@ "src/code.cloudfoundry.org/{}".format(package.name)
        DB: #@ db.value
        DEFAULT_PARAMS: "ci/routing-release/default-params/run-bin-test/linux.yml"
#@ end
#@ end
  - in_parallel:
#@ for package in helpers.packages_without_configure_db(data.values.internal_repos):
    - task: #@ package.name
      file: ci/shared/tasks/run-bin-test/linux.yml
      attempts: 3
      vars:
        image_repository: cloudfoundry/tas-runtime-build
        image_password: ((gcp-wg-arp-service-account/config-json))
        image_tag: ((.:image_tag))
      params:
        DIR: #@ "src/code.cloudfoundry.org/{}".format(package.name)
        DEFAULT_PARAMS: "ci/routing-release/default-params/run-bin-test/linux.yml"
#@ end

- name: lint-repo
  serial: true
  plan:
  - in_parallel:
    - get: ci
    - get: repo
      trigger: true
    - get: image
  - task: lint-repo
    file: ci/shared/tasks/lint-repo/linux.yml
    image: image

- name: release-time-gate
  plan:
  - get: repo
    passed:
      - unit-and-integration-tests
      - template-tests
      - lint-repo
  - get: env-weekly
    trigger: true

- name: claim-env
  serial: true
  on_abort: &release-env-lock
    do:
      - put: routing-release-env-lock
        params:
          release: routing-release-env-lock
  on_failure: *release-env-lock
  plan:
  - in_parallel:
    - get: manual-release-trigger
      trigger: true
      passed: [ manual-release-trigger ]
    - get: ci
    - get: repo
      trigger: true
      passed: [ release-time-gate ]
    - get: image
    - get: env
    - get: routing-release-env-lock
  - put: routing-release-env-lock
    params:
      claim: routing-release-env-lock
  - task: start-bbl-envs
    image: image
    file: ci/shared/tasks/start-gcp-instance/linux.yml
    input_mapping:
      bbl-state: env
    params:
      SERVICE_ACCOUNT_KEY: ((gcp-wg-arp-ci-bbl-service-account/config-json))
      BBL_STATE_DIR: bbl-routing-env
      RESUME: false
  - task: wait-for-bosh-api
    image: image
    file: ci/shared/tasks/wait-for-bosh-api/linux.yml
    params:
      BBL_STATE_DIR: bbl-routing-env

- name: prepare-env
  serial: true
  on_abort: *release-env-lock
  on_failure: *release-env-lock
  plan:
  - in_parallel:
    - get: ci
    - get: repo
      trigger: true
      passed: [claim-env]
    - get: image
    - get: cf-deployment
    - get: cf-deployment-concourse-tasks
    - get: env
      passed: [claim-env]
      trigger: true
    - get: routing-release-env-lock
      passed: [claim-env]
  - try: &delete-cf-deployment
      do:
        - task: bosh-deld
          image: image
          file: ci/shared/tasks/bosh-deld/linux.yml
          params:
            BBL_STATE_DIR: bbl-routing-env
            DEPLOYMENT_NAME: cf
  - task: prepare-cf-deployment-env
    image: image
    file: ci/shared/tasks/run-bin-prepare-cf-deployment-env/linux.yml
    params:
      BBL_STATE_DIR: bbl-routing-env
  - task: combine-ops-files
    file: ci/shared/tasks/combine-assets/linux.yml
    image: image
    input_mapping:
      input-01: cf-deployment
    params:
      COPY_ACTIONS: |
        {ci/routing-release/opsfiles/disable-bbr-non-routing.yml,combined-assets}
        {ci/routing-release/opsfiles/add-tcp-router-backend-tls-certs.yml,combined-assets}
        {ci/shared/opsfiles/add-lb-ca-cert.yml,combined-assets}
        {ci/shared/opsfiles/scale-for-cats.yml,combined-assets}
        {ci/shared/opsfiles/add-smoke-tests.yml,combined-assets}
        {input-01/operations/use-compiled-releases.yml,combined-assets}
        {input-01/operations/backup-and-restore/enable-backup-restore.yml,combined-assets}
        {input-01/operations/add-persistent-isolation-segment-diego-cell.yml,combined-assets}
        {input-01/operations/add-persistent-isolation-segment-router.yml,combined-assets}
        {input-01/operations/scale-database-cluster.yml,combined-assets}
  - task: deploy-cf-deployment
    file: cf-deployment-concourse-tasks/bosh-deploy/task.yml
    input_mapping:
      ops-files: combined-assets
      vars-files: prepared-env
      bbl-state: env
    params:
      BBL_STATE_DIR: bbl-routing-env
      SYSTEM_DOMAIN: bbl-routing-env.arp.cloudfoundry.org
      DEPLOY_WITH_UPTIME_MEASUREMENTS: "false"
      FAIL_ON_DOWNTIME: "false"
      VARS_FILES: vars.yml
      OPS_FILES: #@ "\n".join(data.values.opsfiles)
  - task: prepare-cf-deployment-env-with-cf-vars
    image: image
    file: ci/shared/tasks/run-bin-prepare-cf-deployment-env/linux.yml
    params:
      BBL_STATE_DIR: bbl-routing-env
  - task: uptimer-measure-with-routing-release-update
    file: cf-deployment-concourse-tasks/bosh-deploy-with-created-release/task.yml
    input_mapping:
      ops-files: combined-assets
      release: repo
      vars-files: prepared-env
      bbl-state: env
    params:
      BBL_STATE_DIR: bbl-routing-env
      SYSTEM_DOMAIN: bbl-routing-env.arp.cloudfoundry.org
      TCP_DOMAIN: tcp.bbl-routing-env.arp.cloudfoundry.org
      DEPLOY_WITH_UPTIME_MEASUREMENTS: "true"
      APP_PUSHABILITY_THRESHOLD: "20"
      APP_STATS_THRESHOLD: "20"
      HTTP_AVAILABILITY_THRESHOLD: "20"
      TCP_AVAILABILITY_THRESHOLD: "20"
      AVAILABLE_PORT: "-1"
      TCP_PORT: "1029"
      FAIL_ON_DOWNTIME: "true"
      MEASURE_SYSLOG_AVAILABILITY: "false"
      MEASURE_TCP_AVAILABILITY: "true"
      RECENT_LOGS_THRESHOLD: "50"
      STREAMING_LOGS_THRESHOLD: "50"
      APP_SYSLOG_AVAILABILITY_THRESHOLD: "50"
      USE_SINGLE_APP_INSTANCE: "false"
      VARS_FILES: vars.yml
      OPS_FILES: #@ "\n".join(data.values.opsfiles)
  - task: open-asg-for-credhub
    file: cf-deployment-concourse-tasks/open-asgs-for-bosh-instance-group/task.yml
    input_mapping:
      bbl-state: env
    params:
      BBL_STATE_DIR: bbl-routing-env
      SYSTEM_DOMAIN: bbl-routing-env.arp.cloudfoundry.org
      INSTANCE_GROUP_NAME: credhub
      SECURITY_GROUP_NAME: credhub
  - task: open-asg-for-uaa
    file: cf-deployment-concourse-tasks/open-asgs-for-bosh-instance-group/task.yml
    input_mapping:
      bbl-state: env
    params:
      BBL_STATE_DIR: bbl-routing-env
      SYSTEM_DOMAIN: bbl-routing-env.arp.cloudfoundry.org
      INSTANCE_GROUP_NAME: uaa
      SECURITY_GROUP_NAME: uaa
  - task: enable-feature-flags-for-cats
    file: cf-deployment-concourse-tasks/set-feature-flags/task.yml
    input_mapping:
      bbl-state: env
    params:
      BBL_STATE_DIR: bbl-routing-env
      SYSTEM_DOMAIN: bbl-routing-env.arp.cloudfoundry.org
      ENABLED_FEATURE_FLAGS: diego_docker service_instance_sharing

- name: run-cats
  serial: true
  serial_groups: [acceptance]
  plan:
  - in_parallel:
    - get: ci
    - get: repo
      passed: [prepare-env]
      trigger: true
    - get: image
    - get: env
      passed: [prepare-env]
      trigger: true
    - get: cf-deployment-concourse-tasks
    - get: cf-acceptance-tests
    - get: cf-deployment
  - task: create-cats-config
    image: image
    file: ci/shared/tasks/build-acceptance-test-configs/linux.yml
    params:
      CONFIGS: cats
      WITH_ISOSEG: true
      WITH_DYNAMIC_ASG: true
      BBL_STATE_DIR: bbl-routing-env
  - task: cats
    file: cf-deployment-concourse-tasks/run-cats/task.yml
    attempts: 2
    input_mapping:
      integration-config: built-acceptance-test-configs
    params:
      CONFIG_FILE_PATH: cats.json

- name: run-drats
  serial: true
  serial_groups: [acceptance]
  plan:
  - in_parallel:
    - get: ci
    - get: repo
      passed: [prepare-env]
      trigger: true
    - get: image
    - get: env
      passed: [prepare-env]
      trigger: true
    - get: bbr-binary-release
    - get: disaster-recovery-acceptance-tests
    - get: cf-deployment
  - task: create-drats-config
    image: image
    file: ci/shared/tasks/build-acceptance-test-configs/linux.yml
    params:
      CONFIGS: drats
      BBL_STATE_DIR: bbl-routing-env
  - task: drats
    file: disaster-recovery-acceptance-tests/ci/tasks/drats-with-integration-config/task.yml
    privileged: true
    input_mapping:
      drats-integration-config: built-acceptance-test-configs
    params:
      CONFIG_FILE_PATH: drats.json
      DEFAULT_TIMEOUT_MINS: 90

- name: run-rats
  serial: true
  serial_groups: [acceptance]
  plan:
  - in_parallel:
    - get: ci
    - get: repo
      passed: [prepare-env]
      trigger: true
    - get: image
    - get: env
      passed: [prepare-env]
      trigger: true
    - get: package-release
      resource: golang-release-latest
    - get: cf-deployment
    - get: cf-deployment-concourse-tasks
  - task: determine-image-tag
    image: image
    file: ci/shared/tasks/determine-image-tag/linux.yml
  - load_var: image_tag
    file: determined-image-tag/tag
  - task: prepare-cf-deployment-env
    image: image
    file: ci/shared/tasks/run-bin-prepare-cf-deployment-env/linux.yml
    params:
      BBL_STATE_DIR: bbl-routing-env
  - task: combine-ops-files
    file: ci/shared/tasks/combine-assets/linux.yml
    image: image
    input_mapping:
      input-01: cf-deployment
    params:
      COPY_ACTIONS: |
        {ci/routing-release/opsfiles/disable-bbr-non-routing.yml,combined-assets}
        {ci/routing-release/opsfiles/add-tcp-router-backend-tls-certs.yml,combined-assets}
        {ci/shared/opsfiles/add-lb-ca-cert.yml,combined-assets}
        {ci/shared/opsfiles/scale-for-cats.yml,combined-assets}
        {ci/shared/opsfiles/add-smoke-tests.yml,combined-assets}
        {input-01/operations/use-compiled-releases.yml,combined-assets}
        {input-01/operations/backup-and-restore/enable-backup-restore.yml,combined-assets}
        {input-01/operations/add-persistent-isolation-segment-diego-cell.yml,combined-assets}
        {input-01/operations/add-persistent-isolation-segment-router.yml,combined-assets}
        {input-01/operations/scale-database-cluster.yml,combined-assets}
        {ci/routing-release/opsfiles/enable-tcp-router-tls.yml,combined-assets}
        {ci/routing-release/opsfiles/enable-route-emitter-tls-tcp-routes.yml,combined-assets}
        {ci/routing-release/opsfiles/enable-envoy-mtls.yml,combined-assets}
        {ci/routing-release/opsfiles/disable-rep-unproxied-ports.yml,combined-assets}
        {ci/routing-release/opsfiles/disable-tcp-router-tls.yml,combined-assets}
        {ci/routing-release/opsfiles/disable-route-emitter-tls-tcp-routes.yml,combined-assets}
        {ci/routing-release/opsfiles/disable-envoy-mtls.yml,combined-assets}
        {ci/routing-release/opsfiles/enable-rep-unproxied-ports.yml,combined-assets}
  - task: create-rats-config
    file: ci/shared/tasks/build-acceptance-test-configs/linux.yml
    image: image
    params:
      CONFIGS: rats
      WITH_ISOSEG: true
      WITH_DYNAMIC_ASG: true
      BBL_STATE_DIR: bbl-routing-env
  - task: build-binaries
    file: ci/shared/tasks/build-binaries/linux.yml
    image: image
    params:
      DEFAULT_PARAMS: "ci/routing-release/default-params/build-binaries/linux.yml"
    vars:
      image_repository: cloudfoundry/tas-runtime-build #! build with older version of ubuntu because of GLIB_C bump so that binaries could still be executed in mysql-5.7
      image_password: ((gcp-wg-arp-service-account/config-json))
      image_tag: ((.:image_tag))
  - task: update-cf-with-tls-support-on-tcp-router-and-mtls-only
    file: cf-deployment-concourse-tasks/bosh-deploy/task.yml
    input_mapping:
      ops-files: combined-assets
      vars-files: prepared-env
      bbl-state: env
    params:
      BBL_STATE_DIR: bbl-routing-env
      SYSTEM_DOMAIN: bbl-routing-env.arp.cloudfoundry.org
      DEPLOY_WITH_UPTIME_MEASUREMENTS: "false"
      FAIL_ON_DOWNTIME: "false"
      VARS_FILES: vars.yml
      OPS_FILES: #@ "\n".join(data.values.opsfiles + data.values.opsfiles_enable_tcp_routing_tls)
  - task: run-rats
    file: ci/shared/tasks/run-bin-test/linux.yml
    image: image
    input_mapping:
      input-01: built-acceptance-test-configs
    params:
      DIR: "src/code.cloudfoundry.org/routing-acceptance-tests"
      ENVS: "CONFIG=$PWD/input-01/rats.json"
      FUNCTIONS: "ci/routing-release/helpers/configure-binaries.bash"
    vars:
      image_repository: cloudfoundry/tas-runtime-build #! build with older version of ubuntu because of GLIB_C bump so that binaries could still be executed in mysql-5.7
      image_password: ((gcp-wg-arp-service-account/config-json))
      image_tag: ((.:image_tag))
  - task: update-cf-with-no-tls-tcp-route-support
    file: cf-deployment-concourse-tasks/bosh-deploy/task.yml
    input_mapping:
      ops-files: combined-assets
      vars-files: prepared-env
      bbl-state: env
    params:
      BBL_STATE_DIR: bbl-routing-env
      SYSTEM_DOMAIN: bbl-routing-env.arp.cloudfoundry.org
      DEPLOY_WITH_UPTIME_MEASUREMENTS: "false"
      FAIL_ON_DOWNTIME: "false"
      VARS_FILES: vars.yml
      OPS_FILES: #@ "\n".join(data.values.opsfiles + data.values.opsfiles_disable_tcp_routing_tls)
  - task: run-rats
    file: ci/shared/tasks/run-bin-test/linux.yml
    image: image
    input_mapping:
      input-01: built-acceptance-test-configs
    params:
      DIR: "src/code.cloudfoundry.org/routing-acceptance-tests"
      ENVS: "CONFIG=$PWD/input-01/rats.json"
      FUNCTIONS: "ci/routing-release/helpers/configure-binaries.bash"
    vars:
      image_repository: cloudfoundry/tas-runtime-build #! build with older version of ubuntu because of GLIB_C bump so that binaries could still be executed in mysql-5.7
      image_password: ((gcp-wg-arp-service-account/config-json))
      image_tag: ((.:image_tag))
  - task: reset-to-original-cf-deployment-settings
    file: cf-deployment-concourse-tasks/bosh-deploy/task.yml
    input_mapping:
      ops-files: combined-assets
      vars-files: prepared-env
      bbl-state: env
    params:
      BBL_STATE_DIR: bbl-routing-env
      SYSTEM_DOMAIN: bbl-routing-env.arp.cloudfoundry.org
      DEPLOY_WITH_UPTIME_MEASUREMENTS: "false"
      FAIL_ON_DOWNTIME: "false"
      VARS_FILES: vars.yml
      OPS_FILES: #@ "\n".join(data.values.opsfiles)

- name: run-cfsmoke
  serial: true
  serial_groups: [acceptance]
  plan:
  - in_parallel:
    - get: ci
    - get: repo
      passed: [prepare-env]
      trigger: true
    - get: image
    - get: env
      passed: [prepare-env]
      trigger: true
    - get: cf-deployment-concourse-tasks
    - get: cf-smoke-tests-release
  - task: create-cfsmoke-config
    file: ci/shared/tasks/build-acceptance-test-configs/linux.yml
    image: image
    params:
      CONFIGS: cfsmoke
      WITH_ISOSEG: true
      BBL_STATE_DIR: bbl-routing-env
  - task: cfsmoke
    file: cf-deployment-concourse-tasks/run-errand/task.yml
    input_mapping:
      bbl-state: env
    params:
      BBL_STATE_DIR: bbl-routing-env
      DEPLOYMENT_NAME: cf
      ERRAND_NAME: smoke-tests

- name: export-release
  serial: true
  serial_groups: [acceptance]
  plan:
  - in_parallel:
    - get: ci
    - get: repo
      passed: [prepare-env]
      trigger: true
    - get: image
    - get: env
      passed: [prepare-env]
      trigger: true
    - get: cf-deployment-concourse-tasks
  - task: export-release
    file: ci/shared/tasks/bosh-export-release/linux.yml
    image: image
    params:
      BBL_STATE_DIR: bbl-routing-env

- name: run-cipher-suite
  plan:
  - in_parallel:
    - get: ci
    - get: repo
      passed: [prepare-env]
      trigger: true
    - get: image
    - get: env
      passed: [prepare-env]
      trigger: true
    - get: cf-deployment-concourse-tasks
    - get: cipher-test-release
      trigger: true
    - get: gcp-stemcell-bionic
  - try: &delete-cipher-deployment
      do:
        - task: bosh-deld
          image: image
          file: ci/shared/tasks/bosh-deld/linux.yml
          params:
            BBL_STATE_DIR: bbl-routing-env
            DEPLOYMENT_NAME: cipher
  - task: bosh-deploy-cipher
    image: image
    file: ci/shared/tasks/bosh-deploy-manifest/linux.yml
    input_mapping:
      release-01: cipher-test-release
    params:
      BBL_STATE_DIR: bbl-routing-env
      MANIFEST: ci/routing-release/manifests/cipher.yml
      DEPLOYMENT_NAME: cipher
      ENVS: |
        DEPLOYMENT_RELEASE_DIR=$PWD/release-01
        DEPLOYMENT_GOROUTER_IP=$(bosh -d cf vms --json | jq -r ".Tables[].Rows[] | select(.instance | startswith(\"router\")) | .ips" | head -n1)
  - task: run-cipher-errand
    file: cf-deployment-concourse-tasks/run-errand/task.yml
    input_mapping:
      bbl-state: env
    params:
      BBL_STATE_DIR: bbl-routing-env
      DEPLOYMENT_NAME: cipher
      ERRAND_NAME: run-cipher-test

- name: ship-what
  on_success:
    put: slack-ci-channel
    params:
      text: ":concourse-succeeded: $BUILD_PIPELINE_NAME ship-what just ran. Maybe you should cut a release? $ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME"
  plan:
    - in_parallel:
        steps:
        - get: ci
        - get: repo
          passed:
            - run-cats
            - run-rats
            - run-drats
            - run-cfsmoke
            - run-cipher-suite
            - export-release
          trigger: true
        - get: image
        - get: release-branch
          params:
            submodules: none
        - get: github-release
        - get: version
        - get: env
          passed:
            - run-cats
            - run-rats
            - run-drats
            - run-cfsmoke
            - run-cipher-suite
            - export-release
          trigger: true

    - task: check-safe-to-release-repo
      image: image
      file: ci/shared/tasks/check-safe-to-release-repo/linux.yml
      input_mapping:
        release-repo: release-branch

    - task: build-release-notes-routing
      image: image
      file: ci/shared/tasks/build-release-notes/linux.yml
      input_mapping:
        previous-github-release: github-release

- name: ship-it
  serial: true
  plan:
    - in_parallel:
        steps:
        - get: ci
        - get: repo
          passed: [ ship-what ]
        - get: image
        - get: release-branch
          params:
            submodules: none
        - get: github-release
        - get: version
        - get: develop-branch-mergeback
          params:
            submodules: none

    - task: check-safe-to-release-branch
      image: image
      file: ci/shared/tasks/check-safe-to-release-repo/linux.yml
      input_mapping:
        release-repo: release-branch

    - task: build-release-notes-routing
      image: image
      file: ci/shared/tasks/build-release-notes/linux.yml
      input_mapping:
        previous-github-release: github-release

    - task: bosh-finalize-release
      image: image
      file: ci/shared/tasks/bosh-finalize-release/linux.yml
      params:
        GCP_BLOBSTORE_SERVICE_ACCOUNT_KEY: ((gcp-wg-arp-oss-service-account/config-json))
        RELEASE_NAME: routing

    - put: release-branch
      params:
        repository: finalized-release-repo
        tag: version/number
        tag_prefix: v

    - task: merge-release-onto-develop
      image: image
      file: ci/shared/tasks/git-merge-branches/linux.yml
      input_mapping:
        source-branch: release-branch
        onto-branch: develop-branch-mergeback
      params:
        SOURCE_BRANCH_NAME: release
        ONTO_BRANCH_NAME: develop

    - in_parallel:
        steps:
        - put: draft-github-release
          params:
            name: version/number
            tag: version/number
            tag_prefix: v
            body: built-release-notes/notes.md
            globs:
            - finalized-release-tarball/routing-*.tgz
        - put: develop-branch-mergeback
          params:
            repository: merged-branch
            merge: true

    - get: next-version
      resource: version
      params: {bump: minor}
    - put: next-version
      resource: version
      params: {file: next-version/number}

- name: cleanup-time-gate
  plan:
  - get: cleanup-timer
    trigger: true

- name: wait-for-env-lock-claim
  serial: true
  plan:
  - get: cleanup-timer
    trigger: true
    passed: [ cleanup-time-gate ]
  - get: routing-release-env-lock
  - put: check-unclaimed-env-lock
    resource: routing-release-env-lock
    params:
      check_unclaimed: routing-release-env-lock
      retry-delay: 60m

- name: wait-for-acceptance-tests
  plan:
  - get: image
  - get: routing-release-env-lock
    passed: [ wait-for-env-lock-claim ]
    trigger: true
  - task: sleep
    image: image
    config:
      platform: linux
      run: 
        path: sh
        args:
        - -exc
        - sleep 5h

- name: cleanup-env
  serial: true
  plan:
  - in_parallel:
      steps:
      - get: ci
      - get: env
      - get: image
      - get: manual-cleanup-trigger
        trigger: true
        passed: [ manual-cleanup-trigger ]
      - get: routing-release-env-lock
        passed: [ wait-for-acceptance-tests ]
        trigger: true
  - try: *delete-cf-deployment
  - try: *delete-cipher-deployment
  - task: stop-bbl-envs
    image: image
    file: ci/shared/tasks/stop-gcp-instance/linux.yml
    input_mapping:
      bbl-state: env
    params:
      SERVICE_ACCOUNT_KEY: ((gcp-wg-arp-ci-bbl-service-account/config-json))
      BBL_STATE_DIR: bbl-routing-env
      SUSPEND: false
  - try: *release-env-lock

- name: release-env-lock
  plan:
  - get: routing-release-env-lock
  - try: *release-env-lock

- name: force-cleanup-env
  serial: true
  plan:
  - in_parallel:
      steps:
      - get: ci
      - get: env
      - get: image
  - try: *delete-cf-deployment
  - try: *delete-cipher-deployment
  - task: stop-bbl-envs
    image: image
    file: ci/shared/tasks/stop-gcp-instance/linux.yml
    input_mapping:
      bbl-state: env
    params:
      SERVICE_ACCOUNT_KEY: ((gcp-wg-arp-ci-bbl-service-account/config-json))
      BBL_STATE_DIR: bbl-routing-env
      SUSPEND: false


#! versioning
- name: patch-bump
  serial_groups: [version]
  plan:
  - get: version
    params: {bump: patch}
  - put: version
    params: {file: version/number}

- name: minor-bump
  serial_groups: [version]
  plan:
  - get: version
    params: {bump: minor}
  - put: version
    params: {file: version/number}

- name: major-bump
  serial_groups: [version]
  plan:
  - get: version
    params: {bump: major}
  - put: version
    params: {file: version/number}

#! routing-api-cli
- name: release-routing-api-cli
  plan:
    - in_parallel:
        steps:
        - get: ci
        - get: repo
          passed: [ ship-what ]
        - get: image
        - get: version
          resource: routing-api-cli-version
          params:
            bump: minor
    - task: release-binaries
      file: ci/shared/tasks/run-bin-release-binaries/linux.yml
      image: image
      params:
        DIR: src/code.cloudfoundry.org/routing-api-cli
        OS: |
          linux
          darwin
        ARCH: |
          amd64
          arm64
    - put: routing-api-cli-github-release
      params:
        name: version/version
        tag: version/version
        globs:
        - released-binaries/*.tgz
    - put: version
      resource: routing-api-cli-version
      params:
        file: version/version
